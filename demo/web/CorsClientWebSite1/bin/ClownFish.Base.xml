<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClownFish.Base</name>
    </assembly>
    <members>
        <member name="T:ClownFish.Base.Common.LazyObject`1">
            <summary>
            表示需要延迟创建的对象包装类
            </summary>
            <typeparam name="T">需要延迟创建的对象类型</typeparam>
        </member>
        <member name="P:ClownFish.Base.Common.LazyObject`1.Instance">
            <summary>
            获取延迟创建的对象引用
            </summary>
        </member>
        <member name="T:ClownFish.Base.Common.TestHelper">
            <summary>
            辅助测试的工具类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Common.TestHelper.TryThrowException">
            <summary>
            调用这个方法可以模拟意外的异常发生，用于检验catch的代码是否能正确工作。
            抛出 ExceptionForTest 指定的异常，并将ExceptionForTest设置为NULL，
            如果 ExceptionForTest 为NULL，将忽略本次调用
            </summary>
        </member>
        <member name="P:ClownFish.Base.Common.TestHelper.ExceptionForTest">
            <summary>
            为测试强制设置一个异常，然后在调用TryThrowException()时将会抛出，
            由于这个属性仅仅用于测试环境，因此不考虑线程安全问题
            </summary>
        </member>
        <member name="T:ClownFish.Base.Files.CacheResult`1">
            <summary>
            缓存结果项的包装类
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:ClownFish.Base.Files.CacheResult`1.Result">
            <summary>
            缓存结果项
            </summary>
        </member>
        <member name="T:ClownFish.Base.Files.FileDependencyManager`1">
            <summary>
            文件缓存依赖的管理类
            </summary>
            <typeparam name="T">缓存的数据类型</typeparam>
        </member>
        <member name="M:ClownFish.Base.Files.FileDependencyManager`1.#ctor(System.Func{System.String[],`0},System.String[])">
            <summary>
            构造方法
            </summary>
            <param name="func"></param>
            <param name="files"></param>
        </member>
        <member name="F:ClownFish.Base.Files.FileDependencyManager`1.s_WaitFileCloseTimeout">
            <summary>
            等待文件句柄关闭的时间，单位：毫秒，默认值：3000（3秒）。
            默认值是一个比较保守的时间，为了快速运行单元测试用例，可以修改这个时间
            </summary>
        </member>
        <member name="P:ClownFish.Base.Files.FileDependencyManager`1.Result">
            <summary>
            缓存结果
            </summary>
        </member>
        <member name="T:ClownFish.Base.Framework.AppInitializer">
            <summary>
            应用程序初始化工具类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Framework.AppInitializer.Start">
            <summary>
            程序初始化 启动方法由<see cref="T:ClownFish.Base.Framework.PreApplicationStartMethodAttribute"/>类配置并使用
            </summary>
            <exception cref="T:System.InvalidProgramException">反射调用配置的启动方法，方法调用失败，且该方法的内部异常为空，抛出的反射调用失败异常</exception>
            <exception cref="T:System.Exception">反射调用配置的启动方法，启动方法内部的异常</exception>
        </member>
        <member name="T:ClownFish.Base.Framework.PreApplicationStartMethodAttribute">
            <summary>
            提供对应用程序启动的扩展支持。
            </summary>
            <remarks>
             说明：
             ASP.NET也有一个同名的类型，即：System.Web.PreApplicationStartMethodAttribute
            
             如果使用那个类型，在初始化时不能调用（会抛异常） BuildManager.GetReferencedAssemblies(); 
            
             这个类型的执行时间也会晚一点，它是由Global.asax的Application_Start调用触发的。
             而且它允许执行一个内部方法。
            </remarks>
        </member>
        <member name="M:ClownFish.Base.Framework.PreApplicationStartMethodAttribute.#ctor(System.Type,System.String)">
            <summary>
            初始化 PreApplicationStartMethodAttribute 类的新实例。
            </summary>
            <param name="type">一个描述启动方法的类型的对象。</param><param name="methodName">没有返回值的空参数签名。</param>
        </member>
        <member name="P:ClownFish.Base.Framework.PreApplicationStartMethodAttribute.Type">
            <summary>
            获取关联启动方法所返回的类型。
            </summary>
            <returns>
            一个描述启动方法的类型的对象。
            </returns>
        </member>
        <member name="P:ClownFish.Base.Framework.PreApplicationStartMethodAttribute.MethodName">
            <summary>
            获取关联的启动方法。
            </summary>
            <returns>
            一个字符串，其中包含关联启动方法的名称。
            </returns>
        </member>
        <member name="T:ClownFish.Base.JsonExtensions">
            <summary>
            JSON序列化的工具类
            </summary>
        </member>
        <member name="M:ClownFish.Base.JsonExtensions.ToJson(System.Object)">
            <summary>
            将一个对象序列化为JSON字符串。
            </summary>
            <param name="obj">要序列化的对象</param>
            <returns>序列化得到的JSON字符串</returns>
        </member>
        <member name="M:ClownFish.Base.JsonExtensions.ToJson(System.Object,System.Boolean)">
            <summary>
            将一个对象序列化为JSON字符串。
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="keepType">尽量在序列化过程中保留类型信息（Newtonsoft.Json可支持）</param>
            <returns>序列化得到的JSON字符串</returns>
        </member>
        <member name="M:ClownFish.Base.JsonExtensions.FromJson``1(System.String)">
            <summary>
            将一个JSON字符串反序列化为对象
            </summary>
            <typeparam name="T">反序列的对象类型参数</typeparam>
            <param name="json">JSON字符串</param>
            <returns>反序列化得到的结果</returns>
        </member>
        <member name="M:ClownFish.Base.JsonExtensions.FromJson(System.String,System.Type)">
            <summary>
            将一个JSON字符串反序列化为对象
            </summary>
            <param name="json">JSON字符串</param>
            <param name="destType">反序列的对象类型参数</param>
            <returns>反序列化得到的结果</returns>
        </member>
        <member name="T:ClownFish.Base.Json.SetDefaultJsonSerializerSettingArgs">
            <summary>
            设置默认的JSON序列化配置的事件参数
            </summary>
        </member>
        <member name="P:ClownFish.Base.Json.SetDefaultJsonSerializerSettingArgs.Settings">
            <summary>
            用于获取用效的JsonSerializerSettings实例，可重新赋值或者修改这个对象的属性
            </summary>
        </member>
        <member name="P:ClownFish.Base.Json.SetDefaultJsonSerializerSettingArgs.IsSerialize">
            <summary>
            True: 当前调用是用于序列化，False：用于反序列化
            </summary>
        </member>
        <member name="T:ClownFish.Base.Json.DefaultJsonSerializer">
            <summary>
            Json序列化的默认封装，不能建议直接使用，提供这个类型主要是为了可以替换JSON序列化的实现。
            推荐使用JsonExtensions提供的方法。
            </summary>
        </member>
        <member name="M:ClownFish.Base.Json.DefaultJsonSerializer.GetJsonSerializerSettings(System.Boolean)">
            <summary>
            获取默认的序列化设置
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Json.DefaultJsonSerializer.Serialize(System.Object,System.Boolean)">
            <summary>
            将一个对象序列化为JSON字符串。
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="keepType">尽量在序列化过程中保留类型信息（Newtonsoft.Json可支持）</param>
            <returns>序列化得到的JSON字符串</returns>
        </member>
        <member name="M:ClownFish.Base.Json.DefaultJsonSerializer.Serialize(System.Object,Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            将一个对象序列化为JSON字符串。
            </summary>
            <param name="obj">要序列化的对象</param>
            <param name="settings">序列化参数</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Json.DefaultJsonSerializer.Deserialize``1(System.String)">
            <summary>
            JSON反序列化
            </summary>
            <typeparam name="T">期望反序列化得到的对象类型</typeparam>
            <param name="json">JSON字符串</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Json.DefaultJsonSerializer.Deserialize(System.String,System.Type)">
            <summary>
            JSON反序列化
            </summary>
            <param name="json">JSON字符串</param>
            <param name="destType">期望反序列化得到的对象类型</param>
            <returns></returns>
        </member>
        <member name="E:ClownFish.Base.Json.DefaultJsonSerializer.SetDefaultJsonSerializerSettings">
            <summary>
            设置默认的JSON序列化配置事件
            </summary>
        </member>
        <member name="T:ClownFish.Base.Json.XmlCdataJsonConverter">
            <summary>
            支持XmlCdata的Json序列化包装类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Json.XmlCdataJsonConverter.CanConvert(System.Type)">
            <summary>
            重写JSON.NET的方法
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Json.XmlCdataJsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            重写JSON.NET的方法
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Json.XmlCdataJsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            重写JSON.NET的方法
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:ClownFish.Base.Reflection.DynamicMethodFactory.EmitFastInt(System.Reflection.Emit.ILGenerator,System.Int32)">
            <summary>Emits code to save an integer to the evaluation stack.</summary>
            <param name="ilGenerator">The MSIL generator.</param>
            <param name="value">The value to push.</param>
        </member>
        <member name="M:ClownFish.Base.Reflection.DynamicMethodFactory.EmitBoxIfNeeded(System.Reflection.Emit.ILGenerator,System.Type)">
            <summary>Boxes a type if needed.</summary>
            <param name="ilGenerator">The MSIL generator.</param>
            <param name="type">The type.</param>
        </member>
        <member name="T:ClownFish.Base.Reflection.IInvokeMethod">
            <summary>
            定义了通用的方法调用接口
            </summary>
        </member>
        <member name="T:ClownFish.Base.Reflection.MethodInvokerFactory">
            <summary>
            创建IInvokeMethod实例的工厂类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Reflection.MethodInvokerFactory.CreateMethodInvokerWrapper(System.Reflection.MethodInfo)">
            <summary>
            根据指定的MethodInfo对象创建相应的IInvokeMethod实例。
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.Reflection.MethodExtensions">
            <summary>
            一些扩展方法，用于快速调用方法，它们都可以优化反射性能。
            </summary>
        </member>
        <member name="M:ClownFish.Base.Reflection.MethodExtensions.FastInvoke(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            根据指定的MethodInfo以及参数数组，快速调用相关的方法。
            </summary>
            <param name="methodInfo"></param>
            <param name="obj"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.Reflection.ReflectMethodBase`1">
            <summary>
            为了简化实现IInvokeMethod接口的抽象类，继承类只需要重写InvokeInternal方法即可。
            </summary>
            <typeparam name="TDelegate"></typeparam>
        </member>
        <member name="T:ClownFish.Base.Reflection.IGetValue">
            <summary>
            定义读属性操作的接口
            </summary>
        </member>
        <member name="T:ClownFish.Base.Reflection.ISetValue">
            <summary>
            定义写属性操作的接口
            </summary>
        </member>
        <member name="T:ClownFish.Base.Reflection.GetterSetterFactory">
            <summary>
            创建IGetValue或者ISetValue实例的工厂方法类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Reflection.GetterSetterFactory.CreatePropertyGetterWrapper(System.Reflection.PropertyInfo)">
            <summary>
            根据指定的PropertyInfo对象，返回对应的IGetValue实例
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.GetterSetterFactory.CreatePropertySetterWrapper(System.Reflection.PropertyInfo)">
            <summary>
            根据指定的PropertyInfo对象，返回对应的ISetValue实例
            </summary>
            <param name="propertyInfo"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.Reflection.PropertyExtensions">
            <summary>
            一些扩展方法，用于访问属性，它们都可以优化反射性能。
            </summary>
        </member>
        <member name="M:ClownFish.Base.Reflection.PropertyExtensions.FastGetValue(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            快速调用PropertyInfo的GetValue方法
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.PropertyExtensions.FastSetValue(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            快速调用PropertyInfo的SetValue方法
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="T:ClownFish.Base.Reflection.ReflectionExtensions">
            <summary>
            一些扩展方法，用于反射操作，它们都可以优化反射性能。
            </summary>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetArgumentType(System.Type,System.Type)">
            <summary>
            获取一个封闭泛型的类型参数
            </summary>
            <param name="type">一个具体的封装泛型类型</param>
            <param name="baseTypeDefinition">泛型定义</param>
            <returns>泛型的类型参数</returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetMyAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取某个反射成员的自定义修饰属性定义（单个定义）
            </summary>
            <typeparam name="T">要查找的修饰属性类型</typeparam>
            <param name="m">反射成员对象，例如：方法信息</param>
            <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetMyAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取某个反射成员的自定义修饰属性定义（多个定义）
            </summary>
            <typeparam name="T">要查找的修饰属性类型</typeparam>
            <param name="m">反射成员对象，例如：方法信息</param>
            <param name="inherit">搜索此成员的继承链以查找这些属性，则为 true；否则为 false。</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetReferencedAssemblies">
            <summary>
            获取当前程序加载的所有程序集
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionExtensions.GetAssemblyList``1">
            <summary>
            获取带个指定修饰属性的程序集列表
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.Reflection.ReflectionOptimizeExtensions">
            <summary>
            包含用于优化反射调用性能的扩展类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionOptimizeExtensions.FastGetValue(System.Reflection.FieldInfo,System.Object)">
            <summary>
            用优化的方式快速读取FieldInfo
            </summary>
            <param name="fieldInfo"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionOptimizeExtensions.FastSetField(System.Reflection.FieldInfo,System.Object,System.Object)">
            <summary>
            用优化的方式快速写FieldInfo
            </summary>
            <param name="fieldInfo"></param>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionOptimizeExtensions.FastNew(System.Type)">
            <summary>
            根据指定的Type，用优化的方式快速创建实例
            </summary>
            <param name="instanceType"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionOptimizeExtensions.FastGetValue2(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            用优化的方式快速读取PropertyInfo
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionOptimizeExtensions.FastSetValue2(System.Reflection.PropertyInfo,System.Object,System.Object)">
            <summary>
            用优化的方式快速写PropertyInfo
            </summary>
            <param name="propertyInfo"></param>
            <param name="obj"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClownFish.Base.Reflection.ReflectionOptimizeExtensions.FastInvoke2(System.Reflection.MethodInfo,System.Object,System.Object[])">
            <summary>
            用优化的方式快速调用一个方法
            </summary>
            <param name="methodInfo"></param>
            <param name="obj"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.TypeExtend.BaseEventObject">
            <summary>
            可用于外部事件订阅的基类，继承这个类型后，就可以从其它类型中订阅当前类型的实例事件。
            </summary>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.BaseEventObject.BindSubscribes(System.Type)">
            <summary>
            在实例化的时候绑定事件订阅者
            </summary>
            <param name="srcType"></param>
        </member>
        <member name="T:ClownFish.Base.TypeExtend.EventSubscriber`1">
            <summary>
            用于订阅BaseEventObject派生类型事件的基类，
            如果要订阅BaseEventObject派生类型事件，必须继承此类型，
            为了便于识别，建议继承类型的名称以“EventSubscriber”结尾
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.EventSubscriber`1.SubscribeEvent(`0)">
            <summary>
            订阅事件
            </summary>
            <param name="instance"></param>
        </member>
        <member name="T:ClownFish.Base.TypeExtend.ExtenderManager">
            <summary>
            用于管理扩展类型的工具类
            </summary>
        </member>
        <member name="F:ClownFish.Base.TypeExtend.ExtenderManager.s_typeMapDict">
            <summary>
            类型与继承类型的映射字典
            </summary>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.GetExtendType(System.Type)">
            <summary>
            获取指定类型的扩展类（继承类），
            如果没有找到匹配的类型，就返回NULL
            </summary>
            <param name="srcType"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.RegisterExtendType(System.Type)">
            <summary>
            注册扩展类型（继承类），表示指定的类型要对当前类型的基类做扩展（实例化时将会代替基类），
            为了便于识别，建议扩展类型的名称以“Ext”结尾
            </summary>
            <param name="extType">继承类，表示将要对基类扩展（替代）</param>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.RemoveExtendType(System.Type)">
            <summary>
            移除扩展类型的注册（应该仅用于单元测试）
            </summary>
            <param name="extType"></param>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.RegisterExtendTypes(System.Reflection.Assembly,System.Func{System.Type,System.Boolean})">
            <summary>
            批量注册一个程序集中所有的扩展类型
            </summary>
            <param name="asm">包含扩展类型的程序集</param>
            <param name="extendTypeChecker">用于判断是不是扩展类型的检查委托</param>
        </member>
        <member name="F:ClownFish.Base.TypeExtend.ExtenderManager.s_eventDict">
            <summary>
            保存事件源与订阅类型的映射关系： Type / Type[]
            </summary>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.GetSubscribers(System.Type)">
            <summary>
            获取指定事件源的所有订阅者类型
            如果没有找到匹配的类型，就返回NULL
            </summary>
            <param name="eventSrcType"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.RegisterSubscriber(System.Type,System.Type,System.Boolean)">
            <summary>
            注册事件订阅者
            </summary>
            <param name="subscriberType">事件订阅者类型，要求从EventSubscriber&lt;T&gt;继承</param>
            <param name="eventSrcType">事件源类型，要求从BaseEventObject继承</param>
            <param name="isAdd">是：注册，否：移除注册</param>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.RegisterSubscriber(System.Type)">
            <summary>
            注册事件订阅者，
            为了便于识别，建议事件订阅者类型的名称以“EventSubscriber”结尾
            </summary>
            <param name="subscriberType">事件订阅者类型，要求从EventSubscriber&lt;T&gt;继承</param>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.RemoveSubscriber(System.Type)">
            <summary>
            移除事件订阅者
            </summary>
            <param name="subscriberType"></param>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ExtenderManager.RegisterSubscribers(System.Reflection.Assembly)">
            <summary>
            批量注册一个程序集中所有的事件订阅者
            </summary>
            <param name="asm"></param>
        </member>
        <member name="T:ClownFish.Base.TypeExtend.IObjectResolver">
            <summary>
            对象的构造接口
            </summary>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.IObjectResolver.CreateObject(System.Type)">
            <summary>
            根据指定的类型获取对应的实例
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.TypeExtend.ObjectFactory">
            <summary>
            创建扩展对象的工厂类型
            </summary>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ObjectFactory.SetResolver(ClownFish.Base.TypeExtend.IObjectResolver)">
            <summary>
            设置IObjectResolver的实例，允许在框架外部控制对象的实例化过程。
            </summary>
            <param name="objectResolver"></param>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ObjectFactory.New``1">
            <summary>
            尝试创建指定类型的扩展类，并尝试加载事件订阅者
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.TypeExtend.ObjectFactory.New(System.Type)">
            <summary>
            尝试创建指定类型的扩展类
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="F:ClownFish.Base.Framework.WebConfig.IsAspnetApp">
            <summary>
            当前运行的程序是不是ASP.NET程序
            </summary>
        </member>
        <member name="F:ClownFish.Base.Framework.WebConfig.IsDebugMode">
            <summary>
            相当于HttpContext.IsDebuggingEnabled，不过那个属性是实例的，因此使用不方便，所以就重新实现了一个静态的版本。
            </summary>
        </member>
        <member name="F:ClownFish.Base.Framework.WebConfig.ValidateRequest">
            <summary>
            是否在web.config的pages配置节点开启了validateRequest参数。
            </summary>
        </member>
        <member name="T:ClownFish.Base.Xml.XmlCdata">
            <summary>
            支持CDATA序列化的包装类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="value">初始值</param>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.ToString">
            <summary>
            ToString()
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.op_Implicit(System.String)~ClownFish.Base.Xml.XmlCdata">
            <summary>
            重载操作符，支持隐式类型转换。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlCdata.op_Implicit(ClownFish.Base.Xml.XmlCdata)~System.String">
            <summary>
            重载操作符，支持隐式类型转换。
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:ClownFish.Base.Xml.XmlCdata.Value">
            <summary>
            原始值。
            </summary>
        </member>
        <member name="T:ClownFish.Base.XmlExtensions">
            <summary>
            XML序列化与反序列化的扩展方法类
            </summary>
        </member>
        <member name="M:ClownFish.Base.XmlExtensions.ToXml(System.Object)">
            <summary>
            将对象执行XML序列化（使用UTF-8编码）
            </summary>
            <param name="obj">要序列化的对象</param>
            <returns>XML序列化的结果</returns>
        </member>
        <member name="M:ClownFish.Base.XmlExtensions.FromXml``1(System.String)">
            <summary>
            从XML字符串中反序列化对象（使用UTF-8编码）
            </summary>
            <typeparam name="T">反序列化的结果类型</typeparam>
            <param name="xml">XML字符串</param>
            <returns>反序列化的结果</returns>
        </member>
        <member name="M:ClownFish.Base.XmlExtensions.FromXml(System.String,System.Type)">
            <summary>
             从XML字符串中反序列化对象（使用UTF-8编码）
            </summary>
            <param name="s"></param>
            <param name="type">反序列化的结果类型</param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Base.Xml.XmlHelper">
            <summary>
            实现XML序列化与反序列化的包装工具类
            </summary>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlSerialize(System.Object,System.Text.Encoding)">
            <summary>
            将一个对象序列化为XML字符串
            </summary>
            <param name="o">要序列化的对象</param>
            <param name="encoding">编码方式</param>
            <returns>序列化产生的XML字符串</returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlSerializeToFile(System.Object,System.String,System.Text.Encoding)">
            <summary>
            将一个对象按XML序列化的方式写入到一个文件
            </summary>
            <param name="o">要序列化的对象</param>
            <param name="path">保存文件路径</param>
            <param name="encoding">编码方式</param>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlDeserialize(System.IO.Stream,System.Type)">
            <summary>
            从XML字符串流中反序列化对象
            </summary>
            <param name="stream">包含对象的XML字符串流</param>
            <param name="destType">要序列化的目标类型</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlDeserialize(System.String,System.Type,System.Text.Encoding)">
            <summary>
            从XML字符串中反序列化对象
            </summary>
            <param name="s">包含对象的XML字符串</param>
            <param name="destType">要序列化的目标类型</param>
            <param name="encoding">编码方式</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlDeserialize``1(System.String)">
            <summary>
            从XML字符串中反序列化对象
            </summary>
            <typeparam name="T">结果对象类型</typeparam>
            <param name="s">包含对象的XML字符串</param>
            <returns>反序列化得到的对象</returns>
        </member>
        <member name="M:ClownFish.Base.Xml.XmlHelper.XmlDeserializeFromFile``1(System.String)">
            <summary>
            读入一个文件，并按XML的方式反序列化对象。
            </summary>
            <typeparam name="T">结果对象类型</typeparam>
            <param name="path">文件路径</param>
            <returns>反序列化得到的对象</returns>
        </member>
    </members>
</doc>
