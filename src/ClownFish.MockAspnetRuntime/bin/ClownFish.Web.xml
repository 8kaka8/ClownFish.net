<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ClownFish.Web</name>
    </assembly>
    <members>
        <member name="T:ClownFish.Web.FromBodyAttribute">
            <summary>
            当请求体以JSON/XML传递数据时，且Action有多个参数申明，
            可用 [FromBody] 标记哪个参数值从整体请求体中的JSON/XML反序列化得到参数值，
            没有标记 [FromBody] 的参数将尝试从查询字符串或者HTTP上下文中获取数据。
            </summary>
        </member>
        <member name="T:ClownFish.Web.Client.ClientExtensions">
            <summary>
            定义HttpClient的扩展方法的工具类
            </summary>
        </member>
        <member name="M:ClownFish.Web.Client.ClientExtensions.Send``1(ClownFish.Web.Client.HttpOption)">
            <summary>
            根据指定的HttpRequestOption参数，用【同步】方式发起一次HTTP请求
            </summary>
            <typeparam name="T">返回值的类型参数</typeparam>
            <param name="option">HttpRequestOption的实例，用于描述请求参数</param>
            <returns>返回服务端的调用结果，并转换成指定的类型</returns>
        </member>
        <member name="M:ClownFish.Web.Client.ClientExtensions.SendAsync``1(ClownFish.Web.Client.HttpOption)">
            <summary>
            根据指定的HttpRequestOption参数，用【异步】方式发起一次HTTP请求
            </summary>
            <typeparam name="T">返回值的类型参数</typeparam>
            <param name="option">HttpRequestOption的实例，用于描述请求参数</param>
            <returns>返回服务端的调用结果，并转换成指定的类型</returns>
        </member>
        <member name="T:ClownFish.Web.Client.HttpClient">
            <summary>
            一个用于发送HTTP请求的客户端
            </summary>
        </member>
        <member name="M:ClownFish.Web.Client.HttpClient.GetQueryString(System.Object)">
            <summary>
            生成查询字符串参数
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Client.HttpClient.CreateWebRequest(System.String)">
            <summary>
            创建HttpWebRequest
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Client.HttpClient.SetRequestData(System.Object,ClownFish.Web.SerializeFormat)">
            <summary>
            设置要提交的数据
            </summary>
            <param name="data"></param>
            <param name="format"></param>
        </member>
        <member name="M:ClownFish.Web.Client.HttpClient.SetRequestDataAsync(System.Object,ClownFish.Web.SerializeFormat)">
            <summary>
            设置要提交的数据（以异步方式）
            </summary>
            <param name="data"></param>
            <param name="format"></param>
        </member>
        <member name="M:ClownFish.Web.Client.HttpClient.GetResponse">
            <summary>
            提交请求，并获取服务端响应结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Client.HttpClient.GetResponseAsync">
            <summary>
            提交请求，并获取服务端响应结果（以异步方式）
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Client.HttpClient.GetResult``1(System.Net.HttpWebResponse)">
            <summary>
            从HttpWebResponse读取结果
            </summary>
            <typeparam name="T"></typeparam>
            <param name="response"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Client.HttpClient.Send``1(System.String,System.Object,ClownFish.Web.SerializeFormat)">
            <summary>
            根据指定的URL以及提交数据，用【同步】方式发起一次HTTP请求
            </summary>
            <typeparam name="T">返回值的类型参数</typeparam>
            <param name="url">要访问的URL地址</param>
            <param name="data">要提交的数据对象</param>
            <param name="format">数据对象在传输过程中采用的序列化方式</param>
            <returns>返回服务端的调用结果，并转换成指定的类型</returns>
        </member>
        <member name="M:ClownFish.Web.Client.HttpClient.SendAsync``1(System.String,System.Object,ClownFish.Web.SerializeFormat)">
            <summary>
            根据指定的URL以及提交数据，用【同步】方式发起一次HTTP请求
            </summary>
            <typeparam name="T">返回值的类型参数</typeparam>
            <param name="url">要访问的URL地址</param>
            <param name="data">要提交的数据对象</param>
            <param name="format">数据对象在传输过程中采用的序列化方式</param>
            <returns>返回服务端的调用结果，并转换成指定的类型</returns>
        </member>
        <member name="P:ClownFish.Web.Client.HttpClient.Request">
            <summary>
            HttpWebRequest实例引用
            </summary>
        </member>
        <member name="E:ClownFish.Web.Client.HttpClient.OnBeforeCreateRequest">
            <summary>
            创建HttpWebRequest前将会引发此事件，提供最后一个修改请求参数的机会。
            例如：可以添加一些全局的请求头。
            （扩展点：允许EventSubscriber的继承类来订阅）
            </summary>
        </member>
        <member name="E:ClownFish.Web.Client.HttpClient.OnBeforeSendRequest">
            <summary>
            创建HttpWebRequest之后将会引发此事件，提供最后一个修改请求参数的机会。
            例如：可以添加一些全局的请求头。
            （扩展点：允许EventSubscriber的继承类来订阅）
            </summary>
        </member>
        <member name="T:ClownFish.Web.Client.HttpClient.BeforeCreateRequestEventArgs">
            <summary>
            创建请求前的事件参数类型
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpClient.BeforeCreateRequestEventArgs.Url">
            <summary>
            将要用来创建请求的URL地址
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpClient.BeforeCreateRequestEventArgs.RequestUrl">
            <summary>
            实际要请求的URL，允许在事件中修改，最终以修改后的结果发送请求。
            </summary>
        </member>
        <member name="T:ClownFish.Web.Client.HttpClient.BeforeSendRequestEventArgs">
            <summary>
            创建请求之后的事件参数类型
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpClient.BeforeSendRequestEventArgs.Request">
            <summary>
            HttpWebRequest实例
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpClient.BeforeSendRequestEventArgs.Data">
            <summary>
            当前请求提交的数据，可能为 null
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpClient.BeforeSendRequestEventArgs.Format">
            <summary>
            提交数据的序列化格式
            </summary>
        </member>
        <member name="T:ClownFish.Web.Client.HttpOption">
            <summary>
            表示一次HTTP请求的描述信息
            </summary>
        </member>
        <member name="M:ClownFish.Web.Client.HttpOption.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:ClownFish.Web.Client.HttpOption.IsMustQueryString">
            <summary>
            根据Method属性，返回是不是必须以查询字符串形式提交数据
            </summary>
        </member>
        <member name="M:ClownFish.Web.Client.HttpOption.SetCookieHeader(System.String)">
            <summary>
            直接指定要发送什么 COOKIE，通常用于不需要接收Cookier场景
            注意：
            1、如果需要接收Cookie，请设置 Cookie 属性，
            2、cookieHeader的数据需要自行编码
            </summary>
            <param name="cookieHeader">要发送的COOKIE头内容</param>
        </member>
        <member name="M:ClownFish.Web.Client.HttpOption.CheckInput">
            <summary>
            检查传入的属性是否存在冲突的设置
            </summary>
        </member>
        <member name="M:ClownFish.Web.Client.HttpOption.FromRawText(System.String)">
            <summary>
            根据原始请求信息文本构建 HttpRequestOption 对象（格式可参考Fiddler的Inspectors标签页内容）
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="P:ClownFish.Web.Client.HttpOption.Url">
            <summary>
            URL地址（建议查询字符串参数在Data属性中指定，此处只指定文件路径即可）
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpOption.Method">
            <summary>
            HTTP请求的方法，例如： GET, POST
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpOption.Headers">
            <summary>
            请求头列表
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpOption.Data">
            <summary>
            需要提交的数据（与 $.ajax()方法的 Data 属性含义类似），
            可指定一个FormDataCollection实例，或者一个 IDictionary实例，或者一个匿名对象实例
            如果是GET请求，数据会自动转变成查询字参数，如果是POST，则随请求体发送
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpOption.Format">
            <summary>
            数据的序列化方式。
            注意：不包含请求体的请求，不需要指定这个属性，例如：GET , HEAD
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpOption.ContentType">
            <summary>
            框架自动计算，不需要调用者指定，避免产生错误
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpOption.UserAgent">
            <summary>
            在发送请求时指定 User-Agent 头
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpOption.Cookie">
            <summary>
            Cookie容器
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpOption.Credentials">
            <summary>
            获取或设置请求的身份验证信息。
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpOption.Timeout">
            <summary>
            获取或设置 GetResponse 和 GetRequestStream 方法的超时值（以毫秒为单位）。
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpOption.SetRequestAction">
            <summary>
            指定一个委托，用于在发送请求前设置HttpWebRequest的其它属性
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.HttpOption.ReadResponseAction">
            <summary>
            指定一个委托，用于在请求接收后调用，可获取请求头相关信息
            </summary>
        </member>
        <member name="T:ClownFish.Web.Client.RemoteWebException">
            <summary>
            在HTTP调用时发生的远程服务端异常。
            这个异常类型解决了二个问题：
            1、WebException异常消息Message太笼统，很不友好。
            2、Response属性的页面编码不一致（ASP.NET 采用UTF-8，IIS采用GB2312），导致获取异常页面时乱码问题。
            </summary>
        </member>
        <member name="M:ClownFish.Web.Client.RemoteWebException.#ctor(System.Net.WebException)">
            <summary>
            构造函数
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:ClownFish.Web.Client.RemoteWebException.TryReadResponseText(System.Net.WebException)">
            <summary>
            尝试从WebException实例中读取服务端响应文本
            </summary>
            <param name="ex">WebException的实例</param>
            <returns>异常的描述信息，通常是一段HTML代码</returns>
        </member>
        <member name="M:ClownFish.Web.Client.RemoteWebException.GetHtmlTitle(System.String)">
            <summary>
            尝试从一段HTML代码中读取文档标题部分
            </summary>
            <param name="text">HTML代码</param>
            <returns>文档标题</returns>
        </member>
        <member name="M:ClownFish.Web.Client.RemoteWebException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            构造函数
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:ClownFish.Web.Client.RemoteWebException.ResponseText">
            <summary>
            服务端返回的响应内容（可能为空）
            </summary>
        </member>
        <member name="P:ClownFish.Web.Client.RemoteWebException.Message">
            <summary>
            异常的简单描述
            </summary>
        </member>
        <member name="F:ClownFish.Web.Client.ResponseReader._response">
            <summary>
            HTTP响应对象
            </summary>
        </member>
        <member name="F:ClownFish.Web.Client.ResponseReader._httpHeaderEncoding">
            <summary>
            HTTP响应头中指定的编码
            </summary>
        </member>
        <member name="F:ClownFish.Web.Client.ResponseReader._responseStream">
            <summary>
            HTTP响应流
            </summary>
        </member>
        <member name="F:ClownFish.Web.Client.ResponseReader._textStream">
            <summary>
            响应文本流（可能被复制为内存流）
            </summary>
        </member>
        <member name="F:ClownFish.Web.Client.ResponseReader._isHtml">
            <summary>
            是否是HTML页面的响应
            </summary>
        </member>
        <member name="T:ClownFish.Web.HttpHeaderCollection">
            <summary>
            HTTP头的存储集合
            </summary>
        </member>
        <member name="M:ClownFish.Web.HttpHeaderCollection.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="M:ClownFish.Web.HttpHeaderCollection.Add(System.String,System.String)">
            <summary>
            增加一个键值对
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClownFish.Web.HttpHeaderCollection.Remove(System.String)">
            <summary>
            根据指定的名称删除键值列表元素
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:ClownFish.Web.HttpHeaderCollection.Item(System.String)">
            <summary>
            索引器，根据名称访问集合
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.HttpFile">
            <summary>
            表示一个符合HTTP协议的上传文件
            </summary>
        </member>
        <member name="P:ClownFish.Web.HttpFile.ContentLength">
            <summary>
            获取上载文件的大小（以字节为单位）。
            </summary>
        </member>
        <member name="P:ClownFish.Web.HttpFile.ContentType">
            <summary>
            获取客户端发送的文件的 MIME 内容类型。
            </summary>
        </member>
        <member name="P:ClownFish.Web.HttpFile.FileName">
            <summary>
            获取客户端上的文件的完全限定名称。
            </summary>
        </member>
        <member name="P:ClownFish.Web.HttpFile.FileBody">
            <summary>
            获取上传文件的内容
            </summary>
        </member>
        <member name="T:ClownFish.Web.Http304Result">
            <summary>
            实现一个HTTP 304的执行结果。
            </summary>
        </member>
        <member name="T:ClownFish.Web.IActionResult">
            <summary>
            表示Action结果的接口
            </summary>
        </member>
        <member name="M:ClownFish.Web.IActionResult.Ouput(System.Web.HttpContext)">
            <summary>
            执行输出操作
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:ClownFish.Web.Http304Result.Ouput(System.Web.HttpContext)">
            <summary>
            实现IActionResult接口，执行输出操作
            </summary>
            <param name="context">HttpContext实例</param>
        </member>
        <member name="T:ClownFish.Web.Http404Result">
            <summary>
            实现一个HTTP 404的执行结果。
            </summary>
        </member>
        <member name="M:ClownFish.Web.Http404Result.Ouput(System.Web.HttpContext)">
            <summary>
            实现IActionResult接口，执行输出操作
            </summary>
            <param name="context">HttpContext实例</param>
        </member>
        <member name="T:ClownFish.Web.HttpCacheResult">
            <summary>
            表示需要设置HTTP缓存头的执行结果
            </summary>
        </member>
        <member name="M:ClownFish.Web.HttpCacheResult.#ctor(System.Object,System.Int32)">
            <summary>
            构造函数
            </summary>
            <param name="result"></param>
            <param name="maxAge"></param>
        </member>
        <member name="M:ClownFish.Web.HttpCacheResult.#ctor(System.Object,System.Int32,System.DateTime)">
            <summary>
            构造函数
            </summary>
            <param name="result"></param>
            <param name="maxAge"></param>
            <param name="lastModified"></param>
        </member>
        <member name="M:ClownFish.Web.HttpCacheResult.Ouput(System.Web.HttpContext)">
            <summary>
            输出结果
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:ClownFish.Web.HttpCacheResult.Result">
            <summary>
            要包装的Action执行结果
            </summary>
        </member>
        <member name="P:ClownFish.Web.HttpCacheResult.MaxAge">
            <summary>
            缓存持续时间，单位：秒
            </summary>
        </member>
        <member name="P:ClownFish.Web.HttpCacheResult.LastModified">
            <summary>
            设置此属性用于调用 SetLastModified 方法。
            </summary>
        </member>
        <member name="P:ClownFish.Web.HttpCacheResult.ETag">
            <summary>
            设置此属性用于调用 SetETag 方法。
            </summary>
        </member>
        <member name="T:ClownFish.Web.StreamResult">
            <summary>
            包含流的Action执行结果，通常用于实现文件下载。
            </summary>
        </member>
        <member name="M:ClownFish.Web.StreamResult.#ctor(System.Byte[])">
            <summary>
            构造函数
            </summary>
            <param name="buffer">文件内容的字节数组</param>
        </member>
        <member name="M:ClownFish.Web.StreamResult.#ctor(System.Byte[],System.String)">
            <summary>
            构造函数
            </summary>
            <param name="buffer">文件内容的字节数组</param>
            <param name="contentType">文档类型，允许为空</param>
        </member>
        <member name="M:ClownFish.Web.StreamResult.#ctor(System.Byte[],System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="buffer">文件内容的字节数组</param>
            <param name="contentType">文档类型，允许为空</param>
            <param name="filename">下载对话框显示的文件名</param>
        </member>
        <member name="M:ClownFish.Web.StreamResult.Ouput(System.Web.HttpContext)">
            <summary>
            实现IActionResult接口，执行输出
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:ClownFish.Web.DownloadFileNameEncoder">
            <summary>
            计算用于下载文件的编码工具类
            </summary>
        </member>
        <member name="M:ClownFish.Web.DownloadFileNameEncoder.GetFileNameHeader(System.Web.HttpContext,System.String)">
            <summary>
            根据指定的文件名，按照HTTP相关规范计算用于响应头可以接受的字符串
            </summary>
            <param name="context"></param>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.TextResult">
            <summary>
            表示一个纯文本Action的返回结果
            </summary>
        </member>
        <member name="M:ClownFish.Web.TextResult.#ctor(System.Object)">
            <summary>
            构造方法
            </summary>
            <param name="model">需要输出的数据对象</param>
        </member>
        <member name="M:ClownFish.Web.TextResult.#ctor(System.Object,System.String)">
            <summary>
            构造方法
            </summary>
            <param name="model">需要输出的数据对象</param>
            <param name="contentType">需要设置的 ContentType 标头</param>
        </member>
        <member name="P:ClownFish.Web.TextResult.Model">
            <summary>
            需要输出的数据对象
            </summary>
        </member>
        <member name="P:ClownFish.Web.TextResult.ContentType">
            <summary>
            需要设置的 ContentType 标头
            </summary>
        </member>
        <member name="T:ClownFish.Web.XmlResult">
            <summary>
            表示Action的执行结果为XML
            </summary>
        </member>
        <member name="M:ClownFish.Web.XmlResult.#ctor(System.Object)">
            <summary>
            构造方法
            </summary>
            <param name="model">需要以XML形式输出的数据对象</param>
        </member>
        <member name="P:ClownFish.Web.XmlResult.Model">
            <summary>
            需要以XML形式输出的数据对象
            </summary>
        </member>
        <member name="T:ClownFish.Web.ControllerAssemblyAttribute">
            <summary>
            指示包含Controller的程序集
            </summary>
        </member>
        <member name="T:ClownFish.Web.AuthorizeAttribute">
            <summary>
            用于验证用户身份的修饰属性
            </summary>
        </member>
        <member name="M:ClownFish.Web.AuthorizeAttribute.AuthenticateRequest(System.Web.HttpContext)">
            <summary>
            执行授权检查
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:ClownFish.Web.AuthorizeAttribute.Users">
            <summary>
            允许访问的用户列表，用逗号分隔。
            </summary>
        </member>
        <member name="P:ClownFish.Web.AuthorizeAttribute.Roles">
            <summary>
            允许访问的角色列表，用逗号分隔。
            </summary>
        </member>
        <member name="T:ClownFish.Web.ContextDataAttribute">
            <summary>
            用于根据指定的属性名表达式直接从HttpContext对象中求值。
            </summary>
        </member>
        <member name="M:ClownFish.Web.ContextDataAttribute.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="expression"></param>
        </member>
        <member name="P:ClownFish.Web.ContextDataAttribute.Expression">
            <summary>
            用于求值的属性名，也可以是一个表达式。
            </summary>
        </member>
        <member name="T:ClownFish.Web.HttpValueIgnoreAttribute">
            <summary>
            用于指示不要用Http请求中的内容给一些实体成员赋值。
            </summary>
        </member>
        <member name="T:ClownFish.Web.PageUrlAttribute">
            <summary>
            用于描述一个Action可以处理哪些请求路径。
            注意：这个Attribute可以多次使用，表示可以处理多个请求路径。
            </summary>
        </member>
        <member name="P:ClownFish.Web.PageUrlAttribute.Url">
            <summary>
            指示可以处理的请求路径。比如："/abc.aspx" 
            （Ajax请求【不使用】此参数）
            </summary>
        </member>
        <member name="T:ClownFish.Web.PageRegexUrlAttribute">
            <summary>
            继承于PageUrlAttribute，指示Url是一个正则表达式
            // 注意：正则表达式的匹配的次序未知。
            </summary>
        </member>
        <member name="T:ClownFish.Web.NamespaceMapAttribute">
            <summary>
            命名空间映射标记。
            注意：为了规范代码，在一个应用程序中的包含相同ShortName属性值的NamespaceMapAttribute实例不允许重复，
            所以不要使用与程序集不匹配的命名空间。
            </summary>
        </member>
        <member name="M:ClownFish.Web.NamespaceMapAttribute.#ctor(System.String,System.String)">
            <summary>
            构造函数
            </summary>
            <param name="namespaceString">命名空间的名字字符串</param>
            <param name="shortName">映射之后的短名</param>
        </member>
        <member name="P:ClownFish.Web.NamespaceMapAttribute.Namespace">
            <summary>
            命名空间的名字字符串
            </summary>
        </member>
        <member name="P:ClownFish.Web.NamespaceMapAttribute.ShortName">
            <summary>
            映射之后的短名
            </summary>
        </member>
        <member name="T:ClownFish.Web.Config.OutputCacheConfig">
            <summary>
            OutputCacheConfig
            </summary>
        </member>
        <member name="F:ClownFish.Web.Config.OutputCacheConfig.Settings">
            <summary>
            OutputCacheSetting节点列表
            </summary>
        </member>
        <member name="T:ClownFish.Web.Config.OutputCacheSetting">
            <summary>
            OutputCacheSetting
            </summary>
        </member>
        <member name="T:ClownFish.Web.OutputCacheAttribute">
            <summary>
            用于给Action返回结果指定输出缓存的修饰属性
            </summary>
        </member>
        <member name="P:ClownFish.Web.OutputCacheAttribute.CacheProfile">
            <summary>
            获取或设置 OutputCacheProfile 名称，该名称与输出缓存项的设置关联。
            </summary>
        </member>
        <member name="P:ClownFish.Web.OutputCacheAttribute.Duration">
            <summary>
            取或设置缓存项要保留在输出缓存中的时间。
            </summary>
        </member>
        <member name="P:ClownFish.Web.OutputCacheAttribute.Location">
            <summary>
            获取或设置一个值，该值确定缓存项的位置。
            </summary>
        </member>
        <member name="P:ClownFish.Web.OutputCacheAttribute.NoStore">
            <summary>
            获取或设置一个值，该值确定是否设置了 HTTP Cache-Control: no-store 指令。
            </summary>
        </member>
        <member name="P:ClownFish.Web.OutputCacheAttribute.SqlDependency">
            <summary>
            获取或设置缓存项依赖的一组数据库和表名称对。
            </summary>
        </member>
        <member name="P:ClownFish.Web.OutputCacheAttribute.VaryByContentEncoding">
            <summary>
            获取或设置用于改变缓存项的一组逗号分隔的字符集（内容编码）。
            </summary>
        </member>
        <member name="P:ClownFish.Web.OutputCacheAttribute.VaryByCustom">
            <summary>
            获取输出缓存用来改变缓存项的自定义字符串列表。
            </summary>
        </member>
        <member name="P:ClownFish.Web.OutputCacheAttribute.VaryByHeader">
            <summary>
            获取或设置用于改变缓存项的一组逗号分隔的标头名称。标头名称标识与请求关联的 HTTP 标头。
            </summary>
        </member>
        <member name="P:ClownFish.Web.OutputCacheAttribute.VaryByParam">
            <summary>
            获取查询字符串或窗体 POST 参数的逗号分隔列表，该列表由输出缓存用来改变缓存项。
            </summary>
        </member>
        <member name="P:ClownFish.Web.Config.OutputCacheSetting.FilePath">
            <summary>
            需要缓存的文件路径
            </summary>
        </member>
        <member name="T:ClownFish.Web.SetOutputCacheModule">
            <summary>
            SetOutputCacheModule
            </summary>
        </member>
        <member name="M:ClownFish.Web.SetOutputCacheModule.Init(System.Web.HttpApplication)">
            <summary>
            Init
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:ClownFish.Web.SetOutputCacheModule.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="T:ClownFish.Web.Client.FormDataCollection">
            <summary>
            表示HTTP表单的数据集合（key=value ）
            </summary>
        </member>
        <member name="M:ClownFish.Web.Client.FormDataCollection.GetMultipartContentType">
            <summary>
            获取上传文件的请求头
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Client.FormDataCollection.AddString(System.String,System.String)">
            <summary>
            往集合中添加一个键值对（允许key重复）
            </summary>
            <param name="key">数据项的名称</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:ClownFish.Web.Client.FormDataCollection.AddObject(System.String,System.Object)">
            <summary>
            往集合中添加一个键值对（允许key重复）
            </summary>
            <param name="key">数据项的名称</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:ClownFish.Web.Client.FormDataCollection.ToString">
            <summary>
            输出集合数据为 "application/x-www-form-urlencoded" 格式。
            注意：1、忽略上传文件
                 2、每次调用都会重新计算（因此尽量避免重复调用）
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Client.FormDataCollection.WriteToStream(System.IO.Stream,System.Text.Encoding)">
            <summary>
            将收集的表单数据写入流
            </summary>
            <param name="stream">Stream实例，用于写入</param>
            <param name="encoding">字符编码方式</param>
        </member>
        <member name="M:ClownFish.Web.Client.FormDataCollection.Create(System.Object)">
            <summary>
            将一个对象按"application/x-www-form-urlencoded" 方式序列化
            说明：这个实现与浏览器的实现是有差别的，它不支持数组，也不支持上传文件
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="P:ClownFish.Web.Client.FormDataCollection.HasFile">
            <summary>
            是否包含上传文件
            </summary>
        </member>
        <member name="T:ClownFish.Web.WebRuntime">
            <summary>
            ClownFish.Web在运行时与底层交互的类型封装，重写这些方法可支持友好的单元测试
            </summary>
        </member>
        <member name="M:ClownFish.Web.WebRuntime.GetWebSitePath">
            <summary>
            获取网站部署目录
            等效于：HttpRuntime.AppDomainAppPath;
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.WebRuntime.GetPhysicalPath(System.String)">
            <summary>
            根据指定的站内相对路径，计算文件在磁盘中的物理存放路径（可用于替代 Server.MapPath）
            等效于：Path.Combine(HttpRuntime.AppDomainAppPath, filePath);
            </summary>
            <param name="filePath">相对网站根目录的文件名，不能以 / 开头</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.WebRuntime.WriteResponseHeader(System.Web.HttpResponse,System.String,System.String)">
            <summary>
            写响应头
            </summary>
            <param name="response">HttpResponse实例</param>
            <param name="headerName">响应头的名字</param>
            <param name="headerValue">响应头的内容</param>
        </member>
        <member name="M:ClownFish.Web.WebRuntime.CreateInstanceFromVirtualPath(System.String)">
            <summary>
            根据指定的页面虚拟路径返回对应的HttpHandler的实例
            </summary>
            <param name="pageVirtualPath"></param>
            <returns></returns>
        </member>
        <member name="P:ClownFish.Web.WebRuntime.Instance">
            <summary>
            MvcRuntime的实例
            </summary>
        </member>
        <member name="P:ClownFish.Web.WebRuntime.IsDebugMode">
            <summary>
            获取当前站点是不是以 DEBUG 方式运行
            </summary>
        </member>
        <member name="T:ClownFish.Web.NameValue">
            <summary>
            表示一组用于HTTP传输的 【名称/值】 对。
            </summary>
        </member>
        <member name="M:ClownFish.Web.NameValue.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="P:ClownFish.Web.NameValue.Name">
            <summary>
            键名
            </summary>
        </member>
        <member name="P:ClownFish.Web.NameValue.Value">
            <summary>
            键值
            </summary>
        </member>
        <member name="T:ClownFish.Web.Config.ActionSectionElement">
            <summary>
            Action相关的配置节
            </summary>
        </member>
        <member name="P:ClownFish.Web.Config.ActionSectionElement.JsonpCallback">
            <summary>
            JSONP的回调方法的参数名称，
            如果不希望启用JSONP，请设置为 null ，
            默认值："callback" （与 jQuery 保持一致）
            </summary>
        </member>
        <member name="T:ClownFish.Web.Config.PipelineSectionElement">
            <summary>
            Pipeline相关的配置节
            </summary>
        </member>
        <member name="M:ClownFish.Web.Config.PipelineSectionElement.PostDeserialize">
            <summary>
            
            </summary>
        </member>
        <member name="P:ClownFish.Web.Config.PipelineSectionElement.Http404PagePath">
            <summary>
            404错误页的模板页面路径
            </summary>
        </member>
        <member name="T:ClownFish.Web.Config.RouteTableConfig">
            <summary>
            MVC路径表的配置文件
            </summary>
        </member>
        <member name="F:ClownFish.Web.Config.RouteTableConfig.Routes">
            <summary>
            所有路由规则列表
            </summary>
        </member>
        <member name="T:ClownFish.Web.Config.Route">
            <summary>
            表示一条路由配置规则
            </summary>
        </member>
        <member name="P:ClownFish.Web.Config.Route.Name">
            <summary>
            路由名称，可选项
            </summary>
        </member>
        <member name="P:ClownFish.Web.Config.Route.Url">
            <summary>
            路由URL，可包含参数占位符
            </summary>
        </member>
        <member name="P:ClownFish.Web.Config.Route.Namespace">
            <summary>
            与URL匹配的Controller的命名空间，可选项
            </summary>
        </member>
        <member name="P:ClownFish.Web.Config.Route.Controller">
            <summary>
            与URL匹配的Controller的名称，可选项
            </summary>
        </member>
        <member name="P:ClownFish.Web.Config.Route.Action">
            <summary>
            与URL匹配的Action名称，可选项
            </summary>
        </member>
        <member name="T:ClownFish.Web.SerializeFormat">
            <summary>
            指示Action结果的序列化方式
            </summary>
        </member>
        <member name="F:ClownFish.Web.SerializeFormat.None">
            <summary>
            默认值，没有指定。注意：有些场景下不指定将会出现异常。
            </summary>
        </member>
        <member name="F:ClownFish.Web.SerializeFormat.Text">
            <summary>
            直接调用 ToString() 方法
            匹配标头："text/plain"
            </summary>
        </member>
        <member name="F:ClownFish.Web.SerializeFormat.Json">
            <summary>
            采用 JSON.NET 序列化为 JSON 字符串
            匹配标头："application/json"
            </summary>
        </member>
        <member name="F:ClownFish.Web.SerializeFormat.Json2">
            <summary>
            采用 JSON.NET 序列化为 JSON 字符串，并尽量输出类型信息，可用于服务端之间或者客户端是C#的反序列化。
            匹配标头："application/json"
            </summary>
        </member>
        <member name="F:ClownFish.Web.SerializeFormat.Xml">
            <summary>
            序列化成 XML 字符串
            匹配标头："application/xml"
            </summary>
        </member>
        <member name="F:ClownFish.Web.SerializeFormat.Form">
            <summary>
            采用 "application/x-www-form-urlencoded" 方式序列化
            匹配标头："application/x-www-form-urlencoded"
            </summary>
        </member>
        <member name="F:ClownFish.Web.SerializeFormat.Auto">
            <summary>
            自动根据请求头去响应，用于服务端响应。
            客户端发起请求时，需要指定 Request.Headers["X-Result-Format"]，否则按文本输出
            </summary>
        </member>
        <member name="T:ClownFish.Web.StringExtensions">
            <summary>
            用于UI输出方面的常用字符串扩展
            </summary>
        </member>
        <member name="M:ClownFish.Web.StringExtensions.HtmlEncode(System.String)">
            <summary>
            将字符串转换为 HTML 编码的字符串。
            </summary>
            <param name="str">要编码的字符串。</param>
            <returns>一个已编码的字符串。</returns>
        </member>
        <member name="M:ClownFish.Web.StringExtensions.HtmlAttributeEncode(System.String)">
            <summary>
            将字符串最小限度地转换为 HTML 编码的字符串。
            </summary>
            <param name="str">要编码的字符串。</param>
            <returns>一个已编码的字符串。</returns>
        </member>
        <member name="M:ClownFish.Web.StringExtensions.EqualsIgnoreCase(System.String,System.String)">
            <summary>
            判断二个字符串是否相等，忽略大小写的比较方式。
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.StringExtensions.EndsWithIgnoreCase(System.String,System.String)">
            <summary>
            以忽略大小写的方式调用 string.EndsWith
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.StringExtensions.StartsWithIgnoreCase(System.String,System.String)">
            <summary>
            以忽略大小写的方式调用 string.EndsWith
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.StringExtensions.IndexOfIgnoreCase(System.String,System.String)">
            <summary>
            以忽略大小写的方式调用 string.IndexOf
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.StringExtensions.SplitTrim(System.String,System.Char[])">
            <summary>
            等效于 string.Split(charSeparators, StringSplitOptions.RemoveEmptyEntries)
            且为每个拆分后的结果又做了Trim()操作。
            </summary>
            <param name="str">要拆分的字符串</param>
            <param name="separator">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.StringExtensions.SplitString(System.String,System.Char,System.Char)">
            <summary>
            <para>拆分一个字符串行。如：a=1;b=2;c=3;d=4;</para>
            <para>此时可以调用: SplitString("a=1;b=2;c=3;d=4;", ';', '=');</para>
            <para>说明：对于空字符串，方法也会返回一个空的列表。</para>
            </summary>
            <param name="line">包含所有项目组成的字符串行</param>
            <param name="separator1">每个项目之间的分隔符</param>
            <param name="separator2">每个项目内的分隔符</param>
            <returns>拆分后的结果列表</returns>
        </member>
        <member name="M:ClownFish.Web.StringExtensions.ToTitleCase(System.String)">
            <summary>
            将字符串的首个英文字母大写
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.ValidateRequestMode">
            <summary>
            定义针对请求的安全检查模式
            </summary>
        </member>
        <member name="F:ClownFish.Web.ValidateRequestMode.Inherits">
            <summary>
            从web.config中继承设置
            </summary>
        </member>
        <member name="F:ClownFish.Web.ValidateRequestMode.Enable">
            <summary>
            打开安全检查
            </summary>
        </member>
        <member name="F:ClownFish.Web.ValidateRequestMode.Disable">
            <summary>
            关闭安全检查
            </summary>
        </member>
        <member name="T:ClownFish.Web.Config.FrameworkConfig">
            <summary>
            表示ClownFish.Web的配置信息类型
            </summary>
        </member>
        <member name="P:ClownFish.Web.Config.FrameworkConfig.Pipeline">
            <summary>
            Pipeline相关的配置节
            </summary>
        </member>
        <member name="P:ClownFish.Web.Config.FrameworkConfig.Action">
            <summary>
            Action相关的配置节
            </summary>
        </member>
        <member name="P:ClownFish.Web.Config.FrameworkConfig.StaticFileHandler">
            <summary>
            staticFileHandler相关的配置节
            </summary>
        </member>
        <member name="P:ClownFish.Web.Config.FrameworkConfig.Instance">
            <summary>
            ClownFish.WebConfiguration实例的引用（已缓存对象，具有文件更新后自动刷新功能）
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.DebugHelper">
            <summary>
            提供DEBUG及辅助测试的工具类
            </summary>
        </member>
        <member name="M:ClownFish.Web.DebugHelper.WriteHeader(System.Web.HttpContext,System.String)">
            <summary>
            将DEBUG信息写到响应头，格式："ThreadId, text"
            </summary>
            <param name="context"></param>
            <param name="text"></param>
        </member>
        <member name="T:ClownFish.Web.Config.StaticFileHandlerSectionElement">
            <summary>
            StaticFileHandler的配置节点
            </summary>
        </member>
        <member name="P:ClownFish.Web.Config.StaticFileHandlerSectionElement.CacheDuration">
            <summary>
            各种静态文件的缓存时间，默认值：js:31536000;css:3600;*:31536000，单位：秒
            </summary>
        </member>
        <member name="T:ClownFish.Web.Debug404.DiagnoseResult">
            <summary>
            404错误的诊断结果
            </summary>
        </member>
        <member name="M:ClownFish.Web.Debug404.DiagnoseResult.#ctor">
            <summary>
            构造方法
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.DiagnoseResult.ErrorMessages">
            <summary>
            所有错误消息描述。
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.DiagnoseResult.UrlActionInfo">
            <summary>
            从当前请求URL解析出来的UrlActionInfo实例
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.DiagnoseResult.AssemblyList">
            <summary>
            所有包含Action的程序集列表
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.DiagnoseResult.PageUrlTestResult">
            <summary>
            所有PageUrlAttribute的测试结果
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.DiagnoseResult.PageRegexUrlTestResult">
            <summary>
            所有PageRegexUrlAttribute的测试结果
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.DiagnoseResult.NamespaceMapTestResult">
            <summary>
            所有NamespaceMapAttribute的查找结果
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.DiagnoseResult.RouteTestResult">
            <summary>
            所有路由记录的测试结果
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.DiagnoseResult.ControllerTestResult">
            <summary>
            所有Controller类型的匹配结果
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.DiagnoseResult.ControllerType">
            <summary>
            可以匹配的Controller类型
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.DiagnoseResult.ActionTestResult">
            <summary>
            匹配Controller类型的所有Action测试结果
            </summary>
        </member>
        <member name="T:ClownFish.Web.Debug404.Http404PageHandler">
            <summary>
            404错误的描述Handler
            </summary>
        </member>
        <member name="M:ClownFish.Web.Debug404.Http404PageHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            构造方法
            </summary>
            <param name="context">HttpContext实例</param>
        </member>
        <member name="P:ClownFish.Web.Debug404.Http404PageHandler.DiagnoseResult">
            <summary>
            DiagnoseResult实例
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.Http404PageHandler.IsReusable">
            <summary>
            指示当前HttpHanlder是否可重用（固定值：false）
            </summary>
        </member>
        <member name="T:ClownFish.Web.Debug404.TestResult">
            <summary>
            表示一个404错误发生时测试结果
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.TestResult.Text">
            <summary>
            描述
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.TestResult.IsPass">
            <summary>
            是否测试通过
            </summary>
        </member>
        <member name="P:ClownFish.Web.Debug404.TestResult.Reason">
            <summary>
            测试不通过的原因
            </summary>
        </member>
        <member name="M:ClownFish.Web.HttpExtensions.GetRealVirtualPath(System.Web.HttpContext)">
            <summary>
            获取实际的虚拟路径，如果网站部署在虚拟目录中，将去除虚拟目录的顶层目录名。
            </summary>
            <param name="context">HttpContext实例的引用</param>
            <returns>去除虚拟目录后的实际虚拟路径。</returns>
        </member>
        <member name="M:ClownFish.Web.HttpExtensions.TryGetJsonpCallback(System.Web.HttpContext,System.String)">
            <summary>
            尝试判断是不是JSONP请求，并获取回调方法名称
            </summary>
            <param name="context"></param>
            <param name="callbackParameterName"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.FrameworkExt">
            <summary>
            定义一些用于扩展框架的注入方法
            </summary>
        </member>
        <member name="M:ClownFish.Web.FrameworkExt.RegisterHttpDataConvert``1(System.Func{System.Web.HttpContext,System.Reflection.ParameterInfo,``0})">
            <summary>
            注册用于转换HTTP请求数据到特定类型的转换器（不适用于序列化场景）
            </summary>
            <typeparam name="T"></typeparam>
            <param name="func"></param>
        </member>
        <member name="T:ClownFish.Web.Debug404.Http404DebugModule">
            <summary>
            用于诊断404错误的HTTP模块
            </summary>
        </member>
        <member name="M:ClownFish.Web.Debug404.Http404DebugModule.Init(System.Web.HttpApplication)">
            <summary>
            Init
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:ClownFish.Web.Debug404.Http404DebugModule.TryGetDiagnoseResult(System.Web.HttpContext)">
            <summary>
            尝试从HttpContext实例中获取关联的DiagnoseResult实例
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Debug404.Http404DebugModule.TryGetHttp404PageHandler(System.Web.HttpContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.ActionHelper">
            <summary>
            Action的一些默认操作，可重写用于个性化调整
            </summary>
        </member>
        <member name="M:ClownFish.Web.ActionHelper.ObjectToResult(System.Object)">
            <summary>
            将一个对象包装成IActionResult的实例
            默认以TEXT形式输出，如果需要修改默认格式，可以重写这个方法。
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.ActionHelper.CreateDefaultActionAttribute">
            <summary>
            当Action方法没有指定[Action]标记时，创建一个默认的ActionAttribute的实例，
            如果希望修改ActionAttribute的一些默认属性，可以重写这个方法。
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.Pipeline.ControllerFactory">
            <summary>
            Controller的创建工厂
            </summary>
        </member>
        <member name="M:ClownFish.Web.Pipeline.ControllerFactory.SetResolver(ClownFish.Web.Pipeline.IControllerResolver)">
            <summary>
            设置IControllerResolver的实例，允许在框架外部控制Controller的实例化过程。
            </summary>
            <param name="controllerResolver"></param>
        </member>
        <member name="T:ClownFish.Web.Pipeline.IControllerResolver">
            <summary>
            Controller的构造接口
            </summary>
        </member>
        <member name="M:ClownFish.Web.Pipeline.IControllerResolver.GetController(System.Type)">
            <summary>
            根据指定的Controller类型获取对应的Controller实例
            </summary>
            <param name="controllerType"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.StaticFileHandler">
            <summary>
            静态文件处理器，用于响应静态文件并在输出时设置缓存响应头
            </summary>
        </member>
        <member name="F:ClownFish.Web.StaticFileHandler.s_CssBackgroundImageRegex">
            <summary>
            用于提取CSS中的引用图片的正则表达式
            </summary>
        </member>
        <member name="M:ClownFish.Web.StaticFileHandler.ProcessRequest(System.Web.HttpContext)">
            <summary>
            处理请求，输出文件内容以及设置缓存响应头
            </summary>
            <param name="context"></param>
        </member>
        <member name="P:ClownFish.Web.StaticFileHandler.IsReusable">
            <summary>
            实现 IHttpHandler.IsReusable 属性
            </summary>
        </member>
        <member name="T:ClownFish.Web.ActionEventArgs">
            <summary>
            ActionExecutor中所有事件参数的基类
            </summary>
        </member>
        <member name="P:ClownFish.Web.ActionEventArgs.HttpContext">
            <summary>
            HttpContext实例
            </summary>
        </member>
        <member name="P:ClownFish.Web.ActionEventArgs.ControllerInstance">
            <summary>
            Controller实例
            </summary>
        </member>
        <member name="P:ClownFish.Web.ActionEventArgs.ActionMethod">
            <summary>
            Action方法的反射信息（MethodInfo实例）
            </summary>
        </member>
        <member name="T:ClownFish.Web.CorsCheckEventArgs">
            <summary>
            表示进入CorsCheck阶段的事件参数类型
            </summary>
        </member>
        <member name="P:ClownFish.Web.CorsCheckEventArgs.Origin">
            <summary>
            Origin请求头信息
            </summary>
        </member>
        <member name="P:ClownFish.Web.CorsCheckEventArgs.IsForbidden">
            <summary>
            是否禁止访问，如果在事件中设置为 true ，将禁止本次AJAX的跨域访问。
            </summary>
        </member>
        <member name="T:ClownFish.Web.AuthorizeCheckEventArgs">
            <summary>
            表示进入AuthorizeCheck阶段的事件参数类型
            </summary>
        </member>
        <member name="P:ClownFish.Web.AuthorizeCheckEventArgs.Attribute">
            <summary>
            Action方法上的AuthorizeAttribute实例
            </summary>
        </member>
        <member name="T:ClownFish.Web.EndObtainParametersEventArgs">
            <summary>
            表示进入EndObtainParameters阶段的事件参数类型
            </summary>
        </member>
        <member name="P:ClownFish.Web.EndObtainParametersEventArgs.Parameters">
            <summary>
            获取到的参数值数组，可以在事件中修改数组中的元素。
            </summary>
        </member>
        <member name="T:ClownFish.Web.BeforeExecuteActionEventArgs">
            <summary>
            表示进入 BeforeExceute  阶段的事件参数类型
            </summary>
        </member>
        <member name="P:ClownFish.Web.BeforeExecuteActionEventArgs.Parameters">
            <summary>
            获取到的参数值数组
            </summary>
        </member>
        <member name="T:ClownFish.Web.AfterExecuteActionEventArgs">
            <summary>
            表示进入 AfterExecute 阶段的事件参数类型
            </summary>
        </member>
        <member name="P:ClownFish.Web.AfterExecuteActionEventArgs.Parameters">
            <summary>
            获取到的参数值数组
            </summary>
        </member>
        <member name="P:ClownFish.Web.AfterExecuteActionEventArgs.ExecuteResult">
            <summary>
            执行结果，如果发生异常，此属性为 null
            </summary>
        </member>
        <member name="P:ClownFish.Web.AfterExecuteActionEventArgs.Exception">
            <summary>
            执行过程中发生的异常，如果没有异常发生，此属性保持为 null
            </summary>
        </member>
        <member name="T:ClownFish.Web.ProcessResultEventArgs">
            <summary>
            表示进入结果输出阶段的事件参数类型
            </summary>
        </member>
        <member name="P:ClownFish.Web.ProcessResultEventArgs.ExecuteResult">
            <summary>
            Action的执行结果
            可以在OnOutputResult事件中执行自特定的输出逻辑，并设置ResultHandled=true，来跳过框架的输出过程
            </summary>
        </member>
        <member name="P:ClownFish.Web.ProcessResultEventArgs.ResultHandled">
            <summary>
            表示执行结果已被输出处理，不需要再执行输出过程。
            </summary>
        </member>
        <member name="T:ClownFish.Web.ActionExceptionEventArgs">
            <summary>
            Action 执行过程中发生异常时的事件参数
            </summary>
        </member>
        <member name="P:ClownFish.Web.ActionExceptionEventArgs.Exception">
            <summary>
            Exception 实例
            </summary>
        </member>
        <member name="P:ClownFish.Web.ActionExceptionEventArgs.ExceptionHandled">
            <summary>
            可设置为TRUE，表示异常已被处理，将会停止异常传播。
            </summary>
        </member>
        <member name="T:ClownFish.Web.BaseController">
            <summary>
            所有控制器的基类
            </summary>
        </member>
        <member name="M:ClownFish.Web.BaseController.GetCookie(System.String)">
            <summary>
            从当前请求中读取Cookie
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.BaseController.WriteCookie(System.Web.HttpCookie)">
            <summary>
            写入一个Cookie到当前响应输出
            </summary>
            <param name="cookie"></param>
        </member>
        <member name="M:ClownFish.Web.BaseController.WriteHeader(System.String,System.String)">
            <summary>
            输出一个响应头
            </summary>
            <param name="headerName">响应头的名称</param>
            <param name="value">响应头的值</param>
        </member>
        <member name="M:ClownFish.Web.BaseController.GetHeader(System.String)">
            <summary>
            获取指定的请求头内容
            </summary>
            <param name="headerName">请求头的名称</param>
            <returns></returns>
        </member>
        <member name="P:ClownFish.Web.BaseController.Context">
            <summary>
            HTTP上下文相关对象（HttpContextBase的实例）
            </summary>
        </member>
        <member name="P:ClownFish.Web.BaseController.HttpContext">
            <summary>
            HTTP上下文相关对象（HttpContext的实例）
            </summary>
        </member>
        <member name="P:ClownFish.Web.BaseController.MvcRuntime">
            <summary>
            获取 MvcRuntime 实例的引用
            </summary>
        </member>
        <member name="T:ClownFish.Web.MvcRouteHandler">
            <summary>
            实现 ASP.NET Routing IRouteHandler的路由处理器，可供UrlRoutingModule使用
            </summary>
            <example>
            RouteTable.Routes.Add(new Route("routing/{namespace}/{controller}/{action}", new MvcRouteHandler()));
            </example>
        </member>
        <member name="M:ClownFish.Web.MvcRouteHandler.GetHttpHandler(System.Web.Routing.RequestContext)">
            <summary>
            实现IRouteHandler接口
            </summary>
            <param name="requestContext"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.MvcRoutingModule">
            <summary>
            比 UrlRoutingModule 3.5版本更简单的RoutingModule，而且支持404错误诊断。
            【注意】：MvcRoutingModule 不能和 ASP.NET 的 UrlRoutingModule 同时启用。
            </summary>
        </member>
        <member name="M:ClownFish.Web.MvcRoutingModule.InitRouting">
            <summary>
            给 ASP.NET RouteTable 注册路由规则
            </summary>
        </member>
        <member name="M:ClownFish.Web.MvcRoutingModule.Init(System.Web.HttpApplication)">
            <summary>
            实现IHttpModule接口
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:ClownFish.Web.MvcRoutingModule.Dispose">
            <summary>
            
            </summary>
        </member>
        <member name="T:ClownFish.Web.TaskAsyncActionHandler">
            <summary>
            支持异步的 HttpHandler
            </summary>
        </member>
        <member name="T:ClownFish.Web.UrlParser">
            <summary>
            URL解析器，用于从URL中提取基本的UrlActionInfo信息
            注意：这个类型的实例会被静态变量引用，因此要求是线程安全的。
            </summary>
        </member>
        <member name="M:ClownFish.Web.UrlParser.GetUrlActionInfo(System.Web.HttpContext,System.String)">
            <summary>
            从指定的请求中提取UrlActionInfo
            </summary>
            <param name="context"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.Proxy.ProxyTransferHandler">
            <summary>
            用于服务端代理转发请求的处理器
            </summary>
        </member>
        <member name="F:ClownFish.Web.Proxy.ProxyTransferHandler.TargetUrlKeyName">
            <summary>
            用于【外部模块】给 ProxyTransferHandler 传递目标网址
            </summary>
        </member>
        <member name="M:ClownFish.Web.Proxy.ProxyTransferHandler.GetTransferAddress(System.Web.HttpContext)">
            <summary>
            获取需要转发的目标地址
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Proxy.ProxyTransferHandler.CreateWebRequest(System.String,System.Web.HttpContext)">
            <summary>
            创建 HttpWebRequest 对象
            </summary>
            <param name="destAddress">需要转发的目标地址</param>
            <param name="context">HttpContext实例</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Proxy.ProxyTransferHandler.ProcessRequestAsync(System.Web.HttpContext)">
            <summary>
            以异步方式执行HttpHanlder（基类方法重写）
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Proxy.ProxyTransferHandler.CopyRequestHeaders(System.Web.HttpContext,System.Net.HttpWebRequest)">
            <summary>
            复制请求头
            </summary>
            <param name="context"></param>
            <param name="webRequest"></param>
        </member>
        <member name="M:ClownFish.Web.Proxy.ProxyTransferHandler.SetRequestHeader(System.Web.HttpContext,System.Net.HttpWebRequest,System.String,System.String)">
            <summary>
            设置请求头
            </summary>
            <param name="context"></param>
            <param name="webRequest"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="M:ClownFish.Web.Proxy.ProxyTransferHandler.CopyResponseHeaders(System.Web.HttpContext,System.Net.HttpWebResponse)">
            <summary>
            复制响应头
            </summary>
            <param name="context"></param>
            <param name="webResponse"></param>
        </member>
        <member name="M:ClownFish.Web.Proxy.ProxyTransferHandler.SetResponseHeader(System.Web.HttpContext,System.Net.HttpWebResponse,System.String,System.String)">
            <summary>
            设置响应头
            </summary>
            <param name="context"></param>
            <param name="webResponse"></param>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="T:ClownFish.Web.Proxy.ReverseProxyModule">
            <summary>
            一个简单的反向代理的HTTP模块
            </summary>
        </member>
        <member name="F:ClownFish.Web.Proxy.ReverseProxyModule.s_ProxySiteCookieName">
            <summary>
            常量字符串：代理站点的Cookie名字
            </summary>
        </member>
        <member name="M:ClownFish.Web.Proxy.ReverseProxyModule.Init(System.Web.HttpApplication)">
            <summary>
            实现 IHttpModule.Init 方法
            </summary>
            <param name="app"></param>
        </member>
        <member name="M:ClownFish.Web.Proxy.ReverseProxyModule.GetProxySiteAddress(System.Web.HttpApplication)">
            <summary>
            获取代理目标的站点地址
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Proxy.ReverseProxyModule.CreateProxySiteCookie(System.String)">
            <summary>
            生成可供ReverseProxyModule读取的代理站点Cookie
            </summary>
            <param name="siteAddress"></param>
        </member>
        <member name="M:ClownFish.Web.Proxy.ReverseProxyModule.Dispose">
            <summary>
            实现 IHttpModule.Dispose 方法
            </summary>
        </member>
        <member name="T:ClownFish.Web.Reflection.ControllerRecognizer">
            <summary>
            Controller分类识别器（如果希望修改判断规则，可以继承并重写相关方法。
            注意：这个类型的实例会被静态变量引用，因此要求是线程安全的。
            </summary>
        </member>
        <member name="M:ClownFish.Web.Reflection.ControllerRecognizer.IsPageController(System.Type)">
            <summary>
            判断指定的类型是否为页面控制器
            （使用PageUrlAttribute，PageRegexUrlAttribute定位Action）
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Reflection.ControllerRecognizer.IsServiceController(System.Type)">
            <summary>
            判断指定的类型是否为服务控制器
            </summary>
            <param name="t"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Reflection.ControllerRecognizer.EnsureServicePostfix(System.String)">
            <summary>
            确保指定的类型名称是一个Service类型，
            处理逻辑：如果不是以Service结尾（区分大小写），就添加Service，反之则不处理。
            </summary>
            <param name="typeName"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Reflection.ControllerRecognizer.GetServiceFullName(ClownFish.Web.UrlActionInfo)">
            <summary>
            根据UrlActionInfo收集到的命名空间及类名计算ServiceController的全名
            如果希望在URL中使用简短或者缩写的命名空间，可以重写这个方法
            </summary>
            <param name="info">UrlActionInfo的实例</param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Reflection.ReflectionHelper.IsSupportableType(System.Type)">
            <summary>
            判断是否是一个可支持的参数类型。仅包括：基元类型，string ，decimal，DateTime，Guid, string[], 枚举
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Reflection.ReflectionHelper.GetRealType(System.Type)">
            <summary>
            得到一个实际的类型（排除Nullable类型的影响）。比如：int? 最后将得到int
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Reflection.ReflectionHelper.IsTaskMethod(System.Reflection.MethodInfo)">
            <summary>
            判断是不是一个 Task 方法
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Reflection.ReflectionHelper.GetTaskMethodResultType(System.Reflection.MethodInfo)">
            <summary>
            检查是不是Task&lt;T&gt;方法，如果是，则返回类型参数T，否则返回 null
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.BaseDataProvider.TryGetSpecialParameter(System.Web.HttpContext,System.Reflection.ParameterInfo,System.Object@)">
            <summary>
            根据指定的参数信息，尝试从HTTP上下文中获取参数值
            </summary>
            <param name="context">HttpContext实例</param>
            <param name="p">ParameterInfo实例</param>
            <param name="value">获取到的参数值（如何方法 return true;）</param>
            <returns>如果解析成功（确实存在特殊参数），返回 true，否则返回 false。如果是false，子类需要继续解析参数值</returns>
        </member>
        <member name="T:ClownFish.Web.UiHelper">
            <summary>
            UI相关的工具类
            </summary>
        </member>
        <member name="M:ClownFish.Web.UiHelper.RefJsFileHtml(System.String)">
            <summary>
            生成一个引用JS文件的HTML代码，其中URL包含了文件的最后更新时间。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.UiHelper.RefJsFileHtml(System.String,System.Boolean)">
            <summary>
            生成引入JavaScript文件的HTML代码
            </summary>
            <param name="path"></param>
            <param name="inline"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.UiHelper.RefCssFileHtml(System.String)">
            <summary>
            生成一个引用CSS文件的HTML代码，其中URL包含了文件的最后更新时间。
            </summary>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.UiHelper.RefCssFileHtml(System.String,System.Boolean)">
            <summary>
            生成引入CSS文件的HTML代码
            </summary>
            <param name="path"></param>
            <param name="inline"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.JsonResult">
            <summary>
            表示Action的执行结果为JSON
            </summary>
        </member>
        <member name="M:ClownFish.Web.JsonResult.#ctor(System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="model">将要序列化的对象</param>
        </member>
        <member name="M:ClownFish.Web.JsonResult.#ctor(System.Object,System.Boolean)">
            <summary>
            构造函数
            </summary>
            <param name="model">将要序列化的对象</param>
            <param name="keepTypeInfo">是否在序列化时保留类型信息，可用于服务端之间的反序列化。</param>
        </member>
        <member name="P:ClownFish.Web.JsonResult.Model">
            <summary>
            需要以JSON形式输出的数据对象
            </summary>
        </member>
        <member name="P:ClownFish.Web.JsonResult.KeepTypeInfo">
            <summary>
            是否在JSON序列化时保留类型信息
            </summary>
        </member>
        <member name="T:ClownFish.Web.PageResult">
            <summary>
            表示一个页面结果（页面将由框架执行）
            </summary>
        </member>
        <member name="M:ClownFish.Web.PageResult.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="virtualPath">页面的虚拟路径</param>
        </member>
        <member name="M:ClownFish.Web.PageResult.#ctor(System.String,System.Object)">
            <summary>
            构造函数
            </summary>
            <param name="virtualPath">页面的虚拟路径</param>
            <param name="model">需要绑定到页面上的数据对象</param>
        </member>
        <member name="P:ClownFish.Web.PageResult.VirtualPath">
            <summary>
            页面的虚拟路径
            </summary>
        </member>
        <member name="P:ClownFish.Web.PageResult.Model">
            <summary>
            需要绑定到页面上的数据对象
            </summary>
        </member>
        <member name="T:ClownFish.Web.RedirectResult">
            <summary>
            表示一个重定向的结果
            </summary>
        </member>
        <member name="M:ClownFish.Web.RedirectResult.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="url">需要重定向的目标地址</param>
        </member>
        <member name="P:ClownFish.Web.RedirectResult.Url">
            <summary>
            需要重定向的目标地址
            </summary>
        </member>
        <member name="T:ClownFish.Web.UcResult">
            <summary>
            表示一个用户控件结果（用户控件将由框架执行）
            </summary>
        </member>
        <member name="M:ClownFish.Web.UcResult.#ctor(System.String)">
            <summary>
            构造方法
            </summary>
            <param name="virtualPath">用户控件的虚拟路径</param>
        </member>
        <member name="M:ClownFish.Web.UcResult.#ctor(System.String,System.Object)">
            <summary>
            构造方法
            </summary>
            <param name="virtualPath">用户控件的虚拟路径</param>
            <param name="model">需要绑定到用户控件上的数据对象</param>
        </member>
        <member name="P:ClownFish.Web.UcResult.VirtualPath">
            <summary>
            用户控件的虚拟路径
            </summary>
        </member>
        <member name="P:ClownFish.Web.UcResult.Model">
            <summary>
            需要绑定到用户控件上的数据对象
            </summary>
        </member>
        <member name="T:ClownFish.Web.ResponseWriter">
            <summary>
            用于直接写输出到Response的工具类
            </summary>
        </member>
        <member name="M:ClownFish.Web.ResponseWriter.WritePage(System.String,System.Object,System.Boolean)">
            <summary>
            用指定的Page以及视图数据呈现结果（HTML），
            然后将产生的HTML代码写入HttpContext.Current.Response
            用户控件应从MyPageView&lt;T&gt;继承
            </summary>
            <param name="pageVirtualPath">Page的虚拟路径</param>
            <param name="model">视图数据</param>
            <param name="flush">是否需要在输出html后调用Response.Flush()</param>
        </member>
        <member name="M:ClownFish.Web.ResponseWriter.WriteUserControl(System.String,System.Object,System.Boolean)">
            <summary>
            用指定的用户控件以及视图数据呈现结果（HTML），
            然后将产生的HTML代码写入HttpContext.Current.Response
            用户控件应从MyUserControlView&lt;T&gt;继承
            </summary>
            <param name="ucVirtualPath">用户控件的虚拟路径</param>
            <param name="model">视图数据</param>
            <param name="flush">是否需要在输出html后调用Response.Flush()</param>
        </member>
        <member name="M:ClownFish.Web.ResponseWriter.WriteUserControl(System.String,System.Object,System.String,System.Boolean)">
            <summary>
            用指定的用户控件以及视图数据呈现结果（HTML），
            并生成一段代码，用于将生成的HTML替换哪个DOM节点，
            然后将所有产生的HTML代码写入HttpContext.Current.Response
            用户控件应从MyUserControlView&lt;T&gt;继承
            </summary>
            <param name="ucVirtualPath">用户控件的虚拟路径</param>
            <param name="model">视图数据</param>
            <param name="targetDomId">需要将输出内容替换哪个DOM节点的内容</param>
            <param name="flush">是否需要在输出html后调用Response.Flush()</param>
        </member>
        <member name="M:ClownFish.Web.ResponseWriter.WriteHtml(System.String,System.Boolean)">
            <summary>
            将指定的HTML代码写入HttpContext.Current.Response
            </summary>
            <param name="html">要写入的HTML文本</param>
            <param name="flush">是否需要在输出html后调用Response.Flush()</param>
        </member>
        <member name="T:ClownFish.Web.BaseActionHandlerFactory">
            <summary>
            BaseActionHandlerFactory
            </summary>
        </member>
        <member name="M:ClownFish.Web.BaseActionHandlerFactory.ParseUrl(System.Web.HttpContext,System.String)">
            <summary>
            解析URL，提取UrlActionInfo对象
            </summary>
            <param name="context"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.BaseActionHandlerFactory.GetHandler(System.Web.HttpContext,System.String,System.String,System.String)">
            <summary>
            实现IHttpHandlerFactory接口，从当前请求获取IHttpHandler
            </summary>
            <param name="context"></param>
            <param name="requestType"></param>
            <param name="virtualPath"></param>
            <param name="physicalPath"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.BaseActionHandlerFactory.ReleaseHandler(System.Web.IHttpHandler)">
            <summary>
            实现IHttpHandlerFactory接口
            </summary>
            <param name="handler"></param>
        </member>
        <member name="T:ClownFish.Web.ServiceHandlerFactory">
            <summary>
            响应服务请求的HttpHandlerFactory。它要求将所有Action放在一个以Service结尾的类型中。
            </summary>
        </member>
        <member name="M:ClownFish.Web.ServiceHandlerFactory.ParseUrl(System.Web.HttpContext,System.String)">
            <summary>
            解析URL，提取UrlActionInfo对象
            </summary>
            <param name="context"></param>
            <param name="path"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.Reflection.ActionDescription">
            <summary>
            用于描述【能从URL中提取Controller，Action】的Action
            </summary>
        </member>
        <member name="T:ClownFish.Web.Reflection.RegexActionDescription">
            <summary>
            用于描述【正则表达式URL】的Action
            </summary>
        </member>
        <member name="T:ClownFish.Web.Reflection.MatchActionDescription">
            <summary>
            用于描述【与固定URL匹配】的Action
            </summary>
        </member>
        <member name="M:ClownFish.Web.Reflection.MetadataCache.BuildRestNamespaceDict(System.Collections.Generic.List{System.Reflection.Assembly})">
            <summary>
            构建命名空间映射表（从命名空间全名到别名的映射关系）
            </summary>
            <param name="actionAssemblyList"></param>
        </member>
        <member name="T:ClownFish.Web.UrlActionInfo">
            <summary>
            表示从URL中提取到的 Controller，Action
            </summary>
        </member>
        <member name="F:ClownFish.Web.UrlActionInfo.HttpContextItemKey">
            <summary>
            UrlActionInfo的实例将会以此属性做为KEY 存放在 Httpcontext.Item 集合中。
            </summary>
        </member>
        <member name="M:ClownFish.Web.UrlActionInfo.AddParam(System.String,System.String)">
            <summary>
            给Params集合增加元素
            </summary>
            <param name="name"></param>
            <param name="value"></param>
        </member>
        <member name="P:ClownFish.Web.UrlActionInfo.Controller">
            <summary>
            Controller 名称
            </summary>
        </member>
        <member name="P:ClownFish.Web.UrlActionInfo.Action">
            <summary>
            Action 名称
            </summary>
        </member>
        <member name="P:ClownFish.Web.UrlActionInfo.UrlType">
            <summary>
            URL中的用于区分不同类型的附加信息，允许为空。
            </summary>
        </member>
        <member name="P:ClownFish.Web.UrlActionInfo.Namesapce">
            <summary>
            URL中的命名空间信息，也有可能是一个命名空间的别名（RestServiceModule），允许为空
            </summary>
        </member>
        <member name="P:ClownFish.Web.UrlActionInfo.ClassName">
            <summary>
            URL中的类型名称信息，是一个不完整的类型名称，需要结合Namespace属性一起计算Controller属性
            </summary>
        </member>
        <member name="P:ClownFish.Web.UrlActionInfo.MethodName">
            <summary>
            URL中的方法名称信息，也有可能是一个参数值（RestServiceModule），因此Action属性需要重新计算
            </summary>
        </member>
        <member name="P:ClownFish.Web.UrlActionInfo.ExtName">
            <summary>
            URL中的文件扩展名，允许为空。
            </summary>
        </member>
        <member name="P:ClownFish.Web.UrlActionInfo.RoutePattern">
            <summary>
            从RouteTable获取的匹配路由模式
            </summary>
        </member>
        <member name="P:ClownFish.Web.UrlActionInfo.Params">
            <summary>
            从URL中提取到的参数值
            </summary>
        </member>
        <member name="T:ClownFish.Web.VoidType">
            <summary>
            表示在Action的参数列表中，不需要赋值值的类型，用于区分重载方法
            </summary>
        </member>
        <member name="F:ClownFish.Web.VoidType.Value">
            <summary>
            VoidType实例的固定引用
            </summary>
        </member>
        <member name="M:ClownFish.Web.VoidType.ToString">
            <summary>
            ToString
            </summary>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.Serializer.ActionParametersProviderFactory">
            <summary>
            用于创建Action参数提供者的工厂
            </summary>
        </member>
        <member name="M:ClownFish.Web.Serializer.ActionParametersProviderFactory.CreateProvider(System.Web.HttpContext)">
            <summary>
            根据HttpContext创建一个匹配的IActionParametersProvider实例
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ActionParametersProviderFactory.CreateCustomizeProvider(System.Web.HttpContext)">
            <summary>
            获取自定义的IActionParametersProvider实现
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ActionParametersProviderFactory.CreateFormProvider(System.Web.HttpContext)">
            <summary>
            创建一个可用于解析 FORM表单 的ActionParametersProvider
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ActionParametersProviderFactory.CreateDefaultProvider(System.Web.HttpContext)">
            <summary>
            当FORM, JSON, XML判断失败时，创建 默认 的ActionParametersProvider
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ActionParametersProviderFactory.CreateJsonProvider(System.Web.HttpContext)">
            <summary>
            创建一个可用于解析 JSON 的ActionParametersProvider
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ActionParametersProviderFactory.CreateXmlProvider(System.Web.HttpContext)">
            <summary>
            创建一个可用于解析 XML 的ActionParametersProvider
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:ClownFish.Web.Serializer.ActionParametersProviderFactory.Instance">
            <summary>
            ActionParametersProviderFactory的实例
            </summary>
        </member>
        <member name="T:ClownFish.Web.Serializer.IActionParametersProvider">
            <summary>
            定义用于构造Action传入参数的提供者接口
            </summary>
        </member>
        <member name="M:ClownFish.Web.Serializer.IActionParametersProvider.GetParameters(System.Web.HttpContext,System.Reflection.MethodInfo)">
            <summary>
            根据指定的Action方法实例，从HTTP请求中获取调用参数。
            </summary>
            <param name="context">HttpContext实例</param>
            <param name="method">Action方法实例</param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.Serializer.ModelBuilder">
            <summary>
            从HTTP请求中创建数据对象的构造器
            </summary>
        </member>
        <member name="F:ClownFish.Web.Serializer.ModelBuilder._context">
            <summary>
            HttpContext的实例
            </summary>
        </member>
        <member name="M:ClownFish.Web.Serializer.ModelBuilder.CreateObjectFromHttp(System.Web.HttpContext,System.Reflection.ParameterInfo)">
            <summary>
            从HTTP请求中构造参数对象
            </summary>
            <param name="context"></param>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ModelBuilder.CreateObject(System.Reflection.ParameterInfo)">
            <summary>
            根据参数反射信息创建一个对象（此时没有赋值）
            </summary>
            <param name="parameterInfo"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ModelBuilder.FillModel(System.Object,System.String)">
            <summary>
            根据HttpRequest填充一个数据实体。
            这里不支持嵌套类型的数据实体，且要求各数据成员都是简单的数据类型。
            </summary>
            <param name="model"></param>
            <param name="paramName"></param>
        </member>
        <member name="M:ClownFish.Web.Serializer.ModelBuilder.GetModelDescription(System.Type)">
            <summary>
            返回一个实体类型的描述信息（全部属性及字段）。
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ModelBuilder.GetValueFromHttp(System.Web.HttpContext,System.String,System.Type,System.String)">
            <summary>
            根据指定的名称及期望的数据类型，从HTTP上下文中加载数据
            </summary>
            <param name="context"></param>
            <param name="name"></param>
            <param name="type"></param>
            <param name="parentName"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ModelBuilder.GetValueByNameAndType(System.String,System.Type,System.String)">
            <summary>
            根据指定的名称及期望的数据类型，从HTTP上下文中加载数据
            </summary>
            <param name="name"></param>
            <param name="type"></param>
            <param name="parentName"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ModelBuilder.GetValue(System.String,System.String)">
            <summary>
            根据名字从HTTP上下文中获取数据
            </summary>
            <param name="name"></param>
            <param name="parentName"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ModelBuilder.GetHttpValues(System.String)">
            <summary>
            根据名称读取相关的HTTP参数值
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ModelBuilder.StringToObject(System.String,System.Type)">
            <summary>
            将字符串转换成指定的数据类型
            </summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ModelBuilder.DefaultChangeType(System.String,System.Type)">
            <summary>
            调用.NET的默认实现，将字符串转换成指定的数据类型。
            </summary>
            <param name="value"></param>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Serializer.ModelBuilder.GetStringImplicit(System.Type)">
            <summary>
            判断指定的类型是否能从String类型做隐式类型转换，如果可以，则返回相应的方法
            </summary>
            <param name="conversionType"></param>
            <returns></returns>
        </member>
        <member name="T:ClownFish.Web.PageExecutor">
            <summary>
            用指定的页面路径以及视图数据呈现结果，最后返回生成的HTML代码。
            页面应从MyPageView&lt;T&gt;继承
            </summary>
        </member>
        <member name="M:ClownFish.Web.PageExecutor.Render(System.Web.HttpContext,System.String,System.Object)">
            <summary>
            用指定的页面路径以及视图数据呈现结果，最后返回生成的HTML代码。
            </summary>
            <param name="context">HttpContext对象</param>
            <param name="pageVirtualPath">Page的虚拟路径</param>
            <param name="model">视图数据</param>
            <returns>生成的HTML代码</returns>
        </member>
        <member name="M:ClownFish.Web.PageExecutor.RenderPage(System.Web.HttpContext,System.String,System.Object)">
            <summary>
            用指定的页面路径以及视图数据呈现结果，最后返回生成的HTML代码。
            页面应从MyPageView&lt;T&gt;继承
            </summary>
            <param name="context">HttpContext对象</param>
            <param name="pageVirtualPath">Page的虚拟路径</param>
            <param name="model">视图数据</param>
            <returns>生成的HTML代码</returns>
        </member>
        <member name="M:ClownFish.Web.PageExecutor.GetTextWriter">
            <summary>
            获取TextWriter实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.PageExecutor.GetWriteText(System.IO.TextWriter)">
            <summary>
            获取页面渲染的HTML代码
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.PageExecutor.GetHandler">
            <summary>
            加载页面，以Page形式返回结果
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.PageExecutor.BindModel">
            <summary>
            绑定数据对象
            </summary>
        </member>
        <member name="M:ClownFish.Web.PageExecutor.BeforeExecute">
            <summary>
            执行渲染【前】方法
            </summary>
        </member>
        <member name="M:ClownFish.Web.PageExecutor.AfterExecute">
            <summary>
            执行渲染【后】方法
            </summary>
        </member>
        <member name="M:ClownFish.Web.PageExecutor.HandlerError(System.Object,System.EventArgs)">
            <summary>
            处理已发生的异常
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:ClownFish.Web.PageExecutor.GetLastExceptoin">
            <summary>
            获取最近发生的异常信息
            </summary>
            <returns></returns>
        </member>
        <member name="P:ClownFish.Web.PageExecutor.HttpContext">
            <summary>
            HttpContext实例引入
            </summary>
        </member>
        <member name="P:ClownFish.Web.PageExecutor.PageVirtualPath">
            <summary>
            页面的虚拟路径
            </summary>
        </member>
        <member name="P:ClownFish.Web.PageExecutor.Model">
            <summary>
            要绑定的数据对象
            </summary>
        </member>
        <member name="P:ClownFish.Web.PageExecutor.Handler">
            <summary>
            已加载的页面实例
            </summary>
        </member>
        <member name="T:ClownFish.Web.ActionHandler">
            <summary>
            用于同步操作的 HttpHandler
            </summary>
        </member>
        <member name="T:ClownFish.Web.MvcPageHandlerFactory">
            <summary>
            MvcPageHandlerFactory
            </summary>
        </member>
        <member name="T:ClownFish.Web.ActionAttribute">
            <summary>
            将一个方法标记为一个Action
            </summary>
        </member>
        <member name="P:ClownFish.Web.ActionAttribute.Verb">
            <summary>
            允许哪些访问动词，与web.config中的httpHanlder的配置意义一致。
            </summary>
        </member>
        <member name="P:ClownFish.Web.ActionAttribute.ValidateRequest">
            <summary>
            确定 ASP.NET 是否针对危险值检查来自浏览器的输入。
            </summary>
        </member>
        <member name="P:ClownFish.Web.ActionAttribute.OutFormat">
            <summary>
            Action结果的序列化方式
            </summary>
        </member>
        <member name="T:ClownFish.Web.SessionMode">
            <summary>
            Action所支持的Session模式
            </summary>
        </member>
        <member name="F:ClownFish.Web.SessionMode.NotSupport">
            <summary>
            不支持
            </summary>
        </member>
        <member name="F:ClownFish.Web.SessionMode.Support">
            <summary>
            全支持
            </summary>
        </member>
        <member name="F:ClownFish.Web.SessionMode.ReadOnly">
            <summary>
            仅支持读取
            </summary>
        </member>
        <member name="T:ClownFish.Web.SessionModeAttribute">
            <summary>
            给Action描述Session的支持模式
            </summary>
        </member>
        <member name="M:ClownFish.Web.SessionModeAttribute.#ctor(ClownFish.Web.SessionMode)">
            <summary>
            构造方法
            </summary>
            <param name="mode"></param>
        </member>
        <member name="P:ClownFish.Web.SessionModeAttribute.SessionMode">
            <summary>
            要支持的Session模式
            </summary>
        </member>
        <member name="T:ClownFish.Web.MyBaseMasterPage">
            <summary>
            MasterPage基类
            </summary>
        </member>
        <member name="T:ClownFish.Web.MyBasePage">
            <summary>
            一个基于“System.Web.UI.Page”的类
            </summary>
        </member>
        <member name="M:ClownFish.Web.MyBasePage.SetModel(System.Object)">
            <summary>
            为当前页面设置可绑定的数据对象
            </summary>
            <param name="model"></param>
        </member>
        <member name="T:ClownFish.Web.MyBaseUserControl">
            <summary>
            一个“用户控件”基类
            </summary>
        </member>
        <member name="M:ClownFish.Web.MyBaseUserControl.SetModel(System.Object)">
            <summary>
            为当前实例指定可绑定的数据对象
            </summary>
            <param name="model">可绑定的数据对象</param>
        </member>
        <member name="T:ClownFish.Web.MyPageView`1">
            <summary>
            页面视图的基类
            </summary>
            <typeparam name="TModel">传递给页面呈现时所需的数据实体对象类型</typeparam>
        </member>
        <member name="M:ClownFish.Web.MyPageView`1.SetModel(System.Object)">
            <summary>
            用于页面呈现时所需的数据实体对象
            </summary>
            <param name="model">可绑定的数据对象</param>
        </member>
        <member name="P:ClownFish.Web.MyPageView`1.Model">
            <summary>
            用于页面呈现时所需的数据实体对象
            </summary>
        </member>
        <member name="T:ClownFish.Web.MyUserControlView`1">
            <summary>
            基于用户控件的视图基类，这类用户控件只是用于呈现数据。
            </summary>
            <typeparam name="TModel">传递给用户控件呈现时所需的数据实体对象类型</typeparam>
        </member>
        <member name="M:ClownFish.Web.MyUserControlView`1.SetModel(System.Object)">
            <summary>
            为当前实例指定可绑定的数据对象
            </summary>
            <param name="model">可绑定的数据对象</param>
        </member>
        <member name="P:ClownFish.Web.MyUserControlView`1.Model">
            <summary>
            用于页面呈现时所需的数据实体对象
            </summary>
        </member>
        <member name="T:ClownFish.Web.RazorHelper">
            <summary>
            针对Razor视图引擎操作封装的工具类
            </summary>
        </member>
        <member name="M:ClownFish.Web.RazorHelper.Render(System.Web.HttpContext,System.String,System.Object)">
            <summary>
            渲染一个Razor视图模板
            </summary>
            <param name="context">HttpContext实例引用</param>
            <param name="pageVirtualPath">Razor视图的路径</param>
            <param name="model">要渲染到视图上的数据对象</param>
            <returns>渲染后的HTML代码</returns>
        </member>
        <member name="M:ClownFish.Web.RazorHelper.Render(System.Web.HttpContextBase,System.String,System.Object)">
            <summary>
            渲染一个Razor视图模板
            </summary>
            <param name="context">HttpContextBase实例引用</param>
            <param name="pageVirtualPath">Razor视图的路径</param>
            <param name="model">要渲染到视图上的数据对象</param>
            <returns>渲染后的HTML代码</returns>
        </member>
        <member name="M:ClownFish.Web.RazorHelper.RenderPage(System.Web.HttpContextBase,System.String,System.Object)">
            <summary>
            渲染一个Razor视图模板
            </summary>
            <param name="context">HttpContextBase实例引用</param>
            <param name="pageVirtualPath">Razor视图的路径</param>
            <param name="model">要渲染到视图上的数据对象</param>
            <returns>渲染后的HTML代码</returns>
        </member>
        <member name="T:ClownFish.Web.ViewType">
            <summary>
            ViewType
            </summary>
        </member>
        <member name="P:ClownFish.Web.ViewType.TypeName">
            <summary>
            TypeName
            </summary>
        </member>
        <member name="M:ClownFish.Web.ViewTypeParserFilter.PreprocessDirective(System.String,System.Collections.IDictionary)">
            <summary>
            预处理：页面，用户控件上的指令
            </summary>
        </member>
        <member name="T:ClownFish.Web.ActionExecutor">
            <summary>
            执行Action的处理器
            </summary>
        </member>
        <member name="M:ClownFish.Web.ActionExecutor.ObjectToResult(System.Object,ClownFish.Web.ActionAttribute)">
            <summary>
            尝试根据方法的修饰属性来构造IActionResult实例
            </summary>
            <param name="result">Action的执行结果</param>
            <param name="actionAttr">Action方法上的ActionAttribute实例</param>
            <returns></returns>
        </member>
        <member name="P:ClownFish.Web.ActionExecutor.HttpContext">
            <summary>
            HttpContext实例引用
            </summary>
        </member>
        <member name="P:ClownFish.Web.ActionExecutor.UserData">
            <summary>
            保存用户额外的数据，如果需要使用，请自行赋值。
            </summary>
        </member>
        <member name="E:ClownFish.Web.ActionExecutor.BeginRequest">
            <summary>
            开始进入执行阶段的事件（扩展点：允许EventSubscriber的继承类来订阅）
            </summary>
        </member>
        <member name="E:ClownFish.Web.ActionExecutor.CorsCheck">
            <summary>
            执行跨域检查阶段的事件（扩展点：允许EventSubscriber的继承类来订阅）
            </summary>
        </member>
        <member name="E:ClownFish.Web.ActionExecutor.AuthorizeRequest">
            <summary>
            授权检查阶段的事件，此事件发生在AuthorizeAttribute检查之后。（扩展点：允许EventSubscriber的继承类来订阅）
            </summary>
        </member>
        <member name="E:ClownFish.Web.ActionExecutor.EndObtainParameters">
            <summary>
            获取到Action参数后的事件（扩展点：允许EventSubscriber的继承类来订阅）
            </summary>
        </member>
        <member name="E:ClownFish.Web.ActionExecutor.BeforeExecuteAction">
            <summary>
            执行Action【前】的事件（扩展点：允许EventSubscriber的继承类来订阅）
            </summary>
        </member>
        <member name="E:ClownFish.Web.ActionExecutor.AfterExecuteAction">
            <summary>
            执行Action【后】的事件（扩展点：允许EventSubscriber的继承类来订阅）
            </summary>
        </member>
        <member name="E:ClownFish.Web.ActionExecutor.ProcessResult">
            <summary>
            设置输出阶段的事件（扩展点：允许EventSubscriber的继承类来订阅）
            </summary>
        </member>
        <member name="E:ClownFish.Web.ActionExecutor.EndRequest">
            <summary>
            结束Action执行的事件，即使发生异常，这个事件也会触发（扩展点：允许EventSubscriber的继承类来订阅）
            </summary>
        </member>
        <member name="E:ClownFish.Web.ActionExecutor.OnError">
            <summary>
            执行过程中发生异常的事件（扩展点：允许EventSubscriber的继承类来订阅）
            </summary>
        </member>
        <member name="M:ClownFish.Web.Reflection.ControllerResolver.GetActionInvokeInfo(ClownFish.Web.UrlActionInfo)">
            <summary>
            根据一个Action的调用信息（类名与方法名），返回内部表示的调用信息。
            </summary>
            <param name="info"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.Reflection.ControllerResolver.GetActionInvokeInfo(System.String)">
            <summary>
            根据一个页面请求路径，返回内部表示的调用信息。
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="P:ClownFish.Web.Reflection.ControllerResolver.DiagnoseResult">
            <summary>
            收集404错误的诊断结果对象。
            注意：如果为NULL，表示不进行诊断测试，如果不空，表示要执行诊断测试。
            </summary>
        </member>
        <member name="P:ClownFish.Web.Reflection.InvokeInfo.Instance">
            <summary>
            Controller Instance
            </summary>
        </member>
        <member name="P:ClownFish.Web.Reflection.InvokeInfo.RegexMatch">
            <summary>
            应用到 PageController Action 的PageRegexUrlAttribute的正则表达式
            </summary>
        </member>
        <member name="P:ClownFish.Web.Reflection.InvokeInfo.UrlActionInfo">
            <summary>
            解析 ServiceController 时提取的URL信息
            </summary>
        </member>
        <member name="T:ClownFish.Web.UcExecutor">
            <summary>
            用指定的用户控件以及视图数据呈现结果，最后返回生成的HTML代码。
            用户控件应从MyUserControlView&lt;T&gt;继承
            </summary>
        </member>
        <member name="M:ClownFish.Web.UcExecutor.Render(System.String,System.Object)">
            <summary>
            用指定的用户控件以及视图数据呈现结果，最后返回生成的HTML代码。
            用户控件应从MyUserControlView&lt;T&gt;继承
            </summary>
            <param name="ucVirtualPath">用户控件的虚拟路径</param>
            <param name="model">视图数据</param>
            <returns>生成的HTML代码</returns>
        </member>
        <member name="M:ClownFish.Web.UcExecutor.RenderUserControl(System.String,System.Object)">
            <summary>
            用指定的用户控件以及视图数据呈现结果，最后返回生成的HTML代码。
            用户控件应从MyUserControlView&lt;T&gt;继承
            </summary>
            <param name="ucVirtualPath">用户控件的虚拟路径</param>
            <param name="model">视图数据</param>
            <returns>生成的HTML代码</returns>
        </member>
        <member name="M:ClownFish.Web.UcExecutor.LoadControl">
            <summary>
            加载用户控件
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.UcExecutor.BindModel">
            <summary>
            绑定数据对象
            </summary>
        </member>
        <member name="M:ClownFish.Web.UcExecutor.GetTextWriter">
            <summary>
            获取TextWriter实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.UcExecutor.GetWriteText(System.IO.TextWriter)">
            <summary>
            获取用户控件渲染的HTML代码
            </summary>
            <param name="writer"></param>
            <returns></returns>
        </member>
        <member name="M:ClownFish.Web.UcExecutor.Execute(System.IO.TextWriter)">
            <summary>
            执行控件渲染过程
            </summary>
            <param name="output"></param>
        </member>
        <member name="M:ClownFish.Web.UcExecutor.BeforeExecute">
            <summary>
            执行渲染【前】方法
            </summary>
        </member>
        <member name="M:ClownFish.Web.UcExecutor.AfterExecute">
            <summary>
            执行渲染【后】方法
            </summary>
        </member>
        <member name="P:ClownFish.Web.UcExecutor.Page">
            <summary>
            包含用户控件的Page实例
            </summary>
        </member>
        <member name="P:ClownFish.Web.UcExecutor.Control">
            <summary>
            已加载的用户控件
            </summary>
        </member>
        <member name="P:ClownFish.Web.UcExecutor.UserControlVirtualPath">
            <summary>
            用户控件的虚拟路径
            </summary>
        </member>
        <member name="P:ClownFish.Web.UcExecutor.Model">
            <summary>
            要绑定的数据对象
            </summary>
        </member>
    </members>
</doc>
